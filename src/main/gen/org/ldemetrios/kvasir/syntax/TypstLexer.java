// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Typst.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.ldemetrios.kvasir.syntax;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.ArrayList;
import static org.ldemetrios.kvasir.syntax.ErroneousTypes.*;
import static org.ldemetrios.kvasir.syntax.TypstTypes.*;
import com.intellij.lexer.FlexLexer;


class TypstLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MARKUP = 2;
  public static final int RAW = 4;
  public static final int BLOCK_COMMENT_MODE = 6;
  public static final int BLOCKY_RAW = 8;
  public static final int MATH = 10;
  public static final int EMBEDDED_CODE_EXPR = 12;
  public static final int NON_ATOMIC_EXPR = 14;
  public static final int IF_ELSE_EXPR = 16;
  public static final int WHILE_EXPR = 18;
  public static final int EMBEDDED_STATEMENT = 20;
  public static final int CODE_BLOCK = 22;
  public static final int PARENTHESIZED = 24;
  public static final int UNICODE_ESCAPE = 26;
  public static final int LINK_MODE = 28;
  public static final int LINK_PAR = 30;
  public static final int LINK_SQ = 32;
  public static final int LINK_CURLY = 34;
  public static final int LINK_ANGLE = 36;
  public static final int LABEL_MODE = 38;
  public static final int AFTER_REF = 40;
  public static final int TERM = 42;
  public static final int FOR_EXPR = 44;
  public static final int FOR_EXPR_AFTER_PATTERN = 46;
  public static final int FOR_EXPR_AFTER_IN = 48;
  public static final int AFTER_BRANCH = 50;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\11\u2000\1\u2100\1\u2200\2\u2000\1\u2300"+
    "\1\u2400\2\u2000\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u2000\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000"+
    "\1\u5100\1\u2000\3\u0100\1\u5200\1\u5300\1\u5400\12\u2000\4\u0100"+
    "\1\u5500\17\u2000\2\u0100\1\u5600\41\u2000\2\u0100\1\u5700\1\u5800"+
    "\2\u2000\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00\45\u2000"+
    "\1\u0100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000\1\u6100"+
    "\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600\5\u2000"+
    "\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000\1\u6c00"+
    "\21\u2000\246\u0100\1\u6d00\20\u0100\1\u6e00\1\u6f00\25\u0100\1\u7000"+
    "\34\u0100\1\u7100\14\u2000\2\u0100\1\u7200\u0b06\u2000\1\u7300\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\11\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\35"+
    "\1\36\1\35\24\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\37"+
    "\1\54\1\55\2\37\1\56\1\57\1\60\1\61\1\62"+
    "\1\37\1\63\1\64\1\65\1\66\1\37\1\67\1\70"+
    "\2\37\1\71\1\72\1\73\1\74\6\0\1\3\32\0"+
    "\1\75\11\0\1\76\12\0\1\76\1\0\1\77\2\0"+
    "\1\76\5\0\27\76\1\0\37\76\1\0\u01ca\76\4\0"+
    "\14\76\16\0\5\76\7\0\1\76\1\0\1\76\21\0"+
    "\160\77\5\76\1\0\2\76\3\0\3\76\1\0\1\76"+
    "\6\0\1\76\1\77\3\76\1\0\1\76\1\0\24\76"+
    "\1\0\123\76\1\0\213\76\1\0\5\77\2\0\246\76"+
    "\1\0\46\76\2\0\1\76\6\0\51\76\10\0\55\77"+
    "\1\0\1\77\1\0\2\77\1\0\2\77\1\0\1\77"+
    "\10\0\33\76\4\0\4\76\35\0\13\77\5\0\53\76"+
    "\25\77\12\100\4\0\2\76\1\77\143\76\1\0\1\76"+
    "\7\77\2\0\6\77\2\76\2\77\1\0\4\77\2\76"+
    "\12\100\3\76\2\0\1\76\20\0\1\76\1\77\36\76"+
    "\33\77\2\0\131\76\13\77\1\76\16\0\12\100\41\76"+
    "\11\77\2\76\4\0\1\76\2\0\1\77\2\0\26\76"+
    "\4\77\1\76\11\77\1\76\3\77\1\76\5\77\22\0"+
    "\31\76\3\77\4\0\13\76\65\0\25\76\1\0\10\76"+
    "\25\0\17\77\1\0\41\77\66\76\3\77\1\76\22\77"+
    "\1\76\7\77\12\76\2\77\2\0\12\100\1\0\20\76"+
    "\3\77\1\0\10\76\2\0\2\76\2\0\26\76\1\0"+
    "\7\76\1\0\1\76\3\0\4\76\2\0\1\77\1\76"+
    "\7\77\2\0\2\77\2\0\3\77\1\76\10\0\1\77"+
    "\4\0\2\76\1\0\3\76\2\77\2\0\12\100\2\76"+
    "\12\0\1\76\1\0\1\77\2\0\3\77\1\0\6\76"+
    "\4\0\2\76\2\0\26\76\1\0\7\76\1\0\2\76"+
    "\1\0\2\76\1\0\2\76\2\0\1\77\1\0\5\77"+
    "\4\0\2\77\2\0\3\77\3\0\1\77\7\0\4\76"+
    "\1\0\1\76\7\0\12\100\2\77\3\76\1\77\13\0"+
    "\3\77\1\0\11\76\1\0\3\76\1\0\26\76\1\0"+
    "\7\76\1\0\2\76\1\0\5\76\2\0\1\77\1\76"+
    "\10\77\1\0\3\77\1\0\3\77\2\0\1\76\17\0"+
    "\2\76\2\77\2\0\12\100\11\0\1\76\6\77\1\0"+
    "\3\77\1\0\10\76\2\0\2\76\2\0\26\76\1\0"+
    "\7\76\1\0\2\76\1\0\5\76\2\0\1\77\1\76"+
    "\7\77\2\0\2\77\2\0\3\77\10\0\2\77\4\0"+
    "\2\76\1\0\3\76\2\77\2\0\12\100\1\0\1\76"+
    "\20\0\1\77\1\76\1\0\6\76\3\0\3\76\1\0"+
    "\4\76\3\0\2\76\1\0\1\76\1\0\2\76\3\0"+
    "\2\76\3\0\3\76\3\0\14\76\4\0\5\77\3\0"+
    "\3\77\1\0\4\77\2\0\1\76\6\0\1\77\16\0"+
    "\12\100\20\0\5\77\10\76\1\0\3\76\1\0\27\76"+
    "\1\0\20\76\3\0\1\76\7\77\1\0\3\77\1\0"+
    "\4\77\7\0\2\77\1\0\3\76\5\0\2\76\2\77"+
    "\2\0\12\100\20\0\1\76\3\77\1\0\10\76\1\0"+
    "\3\76\1\0\27\76\1\0\12\76\1\0\5\76\2\0"+
    "\1\77\1\76\7\77\1\0\3\77\1\0\4\77\7\0"+
    "\2\77\7\0\1\76\1\0\2\76\2\77\2\0\12\100"+
    "\1\0\2\76\15\0\4\77\1\0\10\76\1\0\3\76"+
    "\1\0\51\76\2\77\1\76\7\77\1\0\3\77\1\0"+
    "\4\77\1\76\5\0\3\76\1\77\7\0\3\76\2\77"+
    "\2\0\12\100\12\0\6\76\2\0\2\77\1\0\22\76"+
    "\3\0\30\76\1\0\11\76\1\0\1\76\2\0\7\76"+
    "\3\0\1\77\4\0\6\77\1\0\1\77\1\0\10\77"+
    "\6\0\12\100\2\0\2\77\15\0\60\76\1\77\1\76"+
    "\10\77\5\0\7\76\10\77\1\0\12\100\47\0\2\76"+
    "\1\0\1\76\1\0\5\76\1\0\30\76\1\0\1\76"+
    "\1\0\12\76\1\77\1\76\12\77\1\76\2\0\5\76"+
    "\1\0\1\76\1\0\6\77\2\0\12\100\2\0\4\76"+
    "\40\0\1\76\27\0\2\77\6\0\12\100\13\0\1\77"+
    "\1\0\1\77\1\0\1\77\4\0\2\77\10\76\1\0"+
    "\44\76\4\0\24\77\1\0\2\77\5\76\13\77\1\0"+
    "\44\77\11\0\1\77\71\0\53\76\24\77\1\76\12\100"+
    "\6\0\6\76\4\77\4\76\3\77\1\76\3\77\2\76"+
    "\7\77\3\76\4\77\15\76\14\77\1\76\1\77\12\100"+
    "\4\77\2\0\46\76\1\0\1\76\5\0\1\76\2\0"+
    "\53\76\1\0\115\76\1\0\4\76\2\0\7\76\1\0"+
    "\1\76\1\0\4\76\2\0\51\76\1\0\4\76\2\0"+
    "\41\76\1\0\4\76\2\0\7\76\1\0\1\76\1\0"+
    "\4\76\2\0\17\76\1\0\71\76\1\0\4\76\2\0"+
    "\103\76\2\0\3\77\11\0\11\77\16\0\20\76\20\0"+
    "\126\76\2\0\6\76\3\0\u016c\76\2\0\21\76\1\75"+
    "\32\76\5\0\113\76\3\0\13\76\7\0\15\76\1\0"+
    "\4\76\3\77\13\0\22\76\3\77\13\0\22\76\2\77"+
    "\14\0\15\76\1\0\3\76\1\0\2\77\14\0\64\76"+
    "\40\77\3\0\1\76\4\0\1\76\1\77\2\0\12\100"+
    "\41\0\3\77\2\0\12\100\6\0\131\76\7\0\51\76"+
    "\1\77\1\76\5\0\106\76\12\0\37\76\1\0\14\77"+
    "\4\0\14\77\12\0\12\100\36\76\2\0\5\76\13\0"+
    "\54\76\4\0\32\76\6\0\12\100\1\77\45\0\27\76"+
    "\5\77\4\0\65\76\12\77\1\0\35\77\2\0\1\77"+
    "\12\100\6\0\12\100\15\0\1\76\10\0\16\77\102\0"+
    "\5\77\57\76\21\77\7\76\4\0\12\100\21\0\11\77"+
    "\14\0\3\77\36\76\15\77\2\76\12\100\54\76\16\77"+
    "\14\0\44\76\24\77\10\0\12\100\3\0\3\76\12\100"+
    "\44\76\2\0\11\76\7\0\53\76\2\0\3\76\20\0"+
    "\3\77\1\0\25\77\4\76\1\77\6\76\1\77\2\76"+
    "\3\77\1\76\5\0\300\76\72\77\1\0\5\77\26\76"+
    "\2\0\6\76\2\0\46\76\2\0\6\76\2\0\10\76"+
    "\1\0\1\76\1\0\1\76\1\0\1\76\1\0\37\76"+
    "\2\0\65\76\1\0\7\76\1\0\1\76\3\0\3\76"+
    "\1\0\7\76\3\0\4\76\2\0\6\76\4\0\15\76"+
    "\5\0\3\76\1\0\7\76\3\0\13\75\35\0\2\3"+
    "\5\0\1\75\17\0\2\77\23\0\1\77\12\0\1\75"+
    "\21\0\1\76\15\0\1\76\20\0\15\76\63\0\15\77"+
    "\4\0\1\77\3\0\14\77\21\0\1\76\4\0\1\76"+
    "\2\0\12\76\1\0\1\76\2\0\6\76\6\0\1\76"+
    "\1\0\1\76\1\0\1\76\1\0\20\76\2\0\4\76"+
    "\5\0\5\76\4\0\1\76\21\0\51\76\211\0\1\101"+
    "\7\0\3\102\u01e3\0\57\76\1\0\57\76\1\0\205\76"+
    "\6\0\4\76\3\77\2\76\14\0\46\76\1\0\1\76"+
    "\5\0\1\76\2\0\70\76\7\0\1\76\17\0\1\77"+
    "\27\76\11\0\7\76\1\0\7\76\1\0\7\76\1\0"+
    "\7\76\1\0\7\76\1\0\7\76\1\0\7\76\1\0"+
    "\7\76\1\0\40\77\1\75\4\0\3\76\31\0\11\76"+
    "\6\77\1\0\5\76\2\0\5\76\4\0\126\76\2\0"+
    "\2\77\2\0\3\76\1\0\132\76\1\0\4\76\5\0"+
    "\53\76\1\0\136\76\21\0\33\76\65\0\306\76\112\0"+
    "\360\76\20\0\215\76\103\0\56\76\2\0\15\76\3\0"+
    "\20\76\12\100\2\76\24\0\57\76\1\77\4\0\12\77"+
    "\1\0\37\76\2\77\120\76\2\77\45\0\11\76\2\0"+
    "\147\76\2\0\65\76\2\0\5\76\60\0\13\76\1\77"+
    "\3\76\1\77\4\76\1\77\27\76\5\77\30\0\64\76"+
    "\14\0\2\77\62\76\22\77\12\0\12\100\6\0\22\77"+
    "\6\76\3\0\1\76\1\0\2\76\1\77\12\100\34\76"+
    "\10\77\2\0\27\76\15\77\14\0\35\76\3\0\4\77"+
    "\57\76\16\77\16\0\1\76\12\100\6\0\5\76\1\77"+
    "\12\76\12\100\5\76\1\0\51\76\16\77\11\0\3\76"+
    "\1\77\10\76\2\77\2\0\12\100\6\0\27\76\3\0"+
    "\1\76\3\77\62\76\1\77\1\76\3\77\2\76\2\77"+
    "\5\76\2\77\1\76\1\77\1\76\30\0\3\76\2\0"+
    "\13\76\5\77\2\0\3\76\2\77\12\0\6\76\2\0"+
    "\6\76\2\0\6\76\11\0\7\76\1\0\7\76\1\0"+
    "\53\76\1\0\14\76\10\0\163\76\10\77\1\0\2\77"+
    "\2\0\12\100\6\0\244\76\14\0\27\76\4\0\61\76"+
    "\4\0\u0100\103\156\76\2\0\152\76\46\0\7\76\14\0"+
    "\5\76\5\0\1\76\1\77\12\76\1\0\15\76\1\0"+
    "\5\76\1\0\1\76\1\0\2\76\1\0\2\76\1\0"+
    "\154\76\41\0\213\76\6\0\332\76\22\0\100\76\2\0"+
    "\66\76\50\0\12\76\6\0\20\77\20\0\20\77\3\0"+
    "\2\77\30\0\3\77\41\0\1\76\1\0\1\76\3\0"+
    "\1\76\1\0\1\76\1\0\1\76\1\0\1\76\1\0"+
    "\176\76\23\0\12\100\7\0\32\76\4\0\1\77\1\0"+
    "\32\76\13\0\70\76\2\77\37\76\3\0\6\76\2\0"+
    "\6\76\2\0\6\76\2\0\3\76\43\0\14\76\1\0"+
    "\32\76\1\0\23\76\1\0\2\76\1\0\17\76\2\0"+
    "\16\76\42\0\173\76\105\0\65\76\210\0\1\77\202\0"+
    "\35\76\3\0\61\76\17\0\1\77\37\0\40\76\15\0"+
    "\36\76\5\0\46\76\5\77\5\0\36\76\2\0\44\76"+
    "\4\0\10\76\1\0\5\76\52\0\236\76\2\0\12\100"+
    "\6\0\44\76\4\0\44\76\4\0\50\76\10\0\64\76"+
    "\234\0\67\76\11\0\26\76\12\0\10\76\230\0\6\76"+
    "\2\0\1\76\1\0\54\76\1\0\2\76\3\0\1\76"+
    "\2\0\27\76\12\0\27\76\11\0\37\76\101\0\23\76"+
    "\1\0\2\76\12\0\26\76\12\0\32\76\106\0\70\76"+
    "\6\0\2\76\100\0\1\76\3\77\1\0\2\77\5\0"+
    "\4\77\4\76\1\0\3\76\1\0\35\76\2\0\3\77"+
    "\4\0\1\77\40\0\35\76\3\0\35\76\43\0\10\76"+
    "\1\0\34\76\2\77\31\0\66\76\12\0\26\76\12\0"+
    "\23\76\15\0\22\76\156\0\111\76\67\0\63\76\15\0"+
    "\63\76\15\0\44\76\4\77\10\0\12\100\306\0\35\76"+
    "\12\0\1\76\10\0\26\76\13\77\217\0\27\76\11\0"+
    "\3\77\65\76\17\77\37\0\12\100\17\0\4\77\55\76"+
    "\13\77\25\0\31\76\7\0\12\100\6\0\3\77\44\76"+
    "\16\77\1\0\12\100\4\0\1\76\2\77\11\0\43\76"+
    "\1\77\2\0\1\76\11\0\3\77\60\76\16\77\4\76"+
    "\4\0\4\77\3\0\12\100\1\76\1\0\1\76\43\0"+
    "\22\76\1\0\31\76\14\77\6\0\1\77\101\0\7\76"+
    "\1\0\1\76\1\0\4\76\1\0\17\76\1\0\12\76"+
    "\7\0\57\76\14\77\5\0\12\100\6\0\4\77\1\0"+
    "\10\76\2\0\2\76\2\0\26\76\1\0\7\76\1\0"+
    "\2\76\1\0\5\76\1\0\2\77\1\76\7\77\2\0"+
    "\2\77\2\0\3\77\2\0\1\76\6\0\1\77\5\0"+
    "\5\76\2\77\2\0\7\77\3\0\5\77\213\0\65\76"+
    "\22\77\4\76\5\0\12\100\4\0\1\77\1\76\40\0"+
    "\60\76\24\77\2\76\1\0\1\76\10\0\12\100\246\0"+
    "\57\76\7\77\2\0\11\77\27\0\4\76\2\77\42\0"+
    "\60\76\21\77\3\0\1\76\13\0\12\100\46\0\53\76"+
    "\15\77\1\76\7\0\12\100\66\0\33\76\2\0\17\77"+
    "\4\0\12\100\306\0\54\76\17\77\145\0\100\76\12\100"+
    "\25\0\1\76\240\0\10\76\2\0\47\76\7\77\2\0"+
    "\7\77\1\76\1\0\1\76\1\77\33\0\1\76\12\77"+
    "\50\76\7\77\1\76\4\77\10\0\1\77\10\0\1\76"+
    "\13\77\56\76\20\77\3\0\1\76\42\0\71\76\7\0"+
    "\11\76\1\0\45\76\10\77\1\0\10\77\1\76\17\0"+
    "\12\100\30\0\36\76\2\0\26\77\1\0\16\77\111\0"+
    "\7\76\1\0\2\76\1\0\46\76\6\77\3\0\1\77"+
    "\1\0\2\77\1\0\7\77\1\76\1\77\10\0\12\100"+
    "\6\0\6\76\1\0\2\76\1\0\40\76\5\77\1\0"+
    "\2\77\1\0\5\77\1\76\7\0\12\100\u0136\0\23\76"+
    "\4\77\11\0\232\76\146\0\157\76\21\0\304\76\274\0"+
    "\57\76\321\0\107\76\271\0\71\76\7\0\37\76\1\0"+
    "\12\100\146\0\36\76\2\0\5\77\13\0\60\76\7\77"+
    "\11\0\4\76\14\0\12\100\11\0\25\76\5\0\23\76"+
    "\260\0\100\76\200\0\113\76\4\0\1\77\1\76\67\77"+
    "\7\0\4\77\15\76\100\0\2\76\1\0\1\76\34\0"+
    "\370\76\10\0\363\76\15\0\37\76\61\0\3\76\21\0"+
    "\4\76\10\0\u018c\76\4\0\153\76\5\0\15\76\3\0"+
    "\11\76\7\0\12\76\3\0\2\77\306\0\5\77\3\0"+
    "\6\77\10\0\10\77\2\0\7\77\36\0\4\77\224\0"+
    "\3\77\273\0\125\76\1\0\107\76\1\0\2\76\2\0"+
    "\1\76\2\0\2\76\2\0\4\76\1\0\14\76\1\0"+
    "\1\76\1\0\7\76\1\0\101\76\1\0\4\76\2\0"+
    "\10\76\1\0\7\76\1\0\34\76\1\0\4\76\1\0"+
    "\5\76\1\0\1\76\3\0\7\76\1\0\u0154\76\2\0"+
    "\31\76\1\0\31\76\1\0\37\76\1\0\31\76\1\0"+
    "\37\76\1\0\31\76\1\0\37\76\1\0\31\76\1\0"+
    "\37\76\1\0\31\76\1\0\10\76\2\0\62\100\67\77"+
    "\4\0\62\77\10\0\1\77\16\0\1\77\26\0\5\77"+
    "\1\0\17\77\120\0\7\77\1\0\21\77\2\0\7\77"+
    "\1\0\2\77\1\0\5\77\325\0\55\76\3\0\7\77"+
    "\7\76\2\0\12\100\4\0\1\76\u0171\0\54\76\4\77"+
    "\12\100\6\0\305\76\13\0\7\77\51\0\104\76\7\77"+
    "\1\76\4\0\12\100\246\0\4\76\1\0\33\76\1\0"+
    "\2\76\1\0\1\76\2\0\1\76\1\0\12\76\1\0"+
    "\4\76\1\0\1\76\1\0\1\76\6\0\1\76\4\0"+
    "\1\76\1\0\1\76\1\0\1\76\1\0\3\76\1\0"+
    "\2\76\1\0\1\76\2\0\1\76\1\0\1\76\1\0"+
    "\1\76\1\0\1\76\1\0\1\76\1\0\2\76\1\0"+
    "\1\76\2\0\4\76\1\0\7\76\1\0\4\76\1\0"+
    "\4\76\1\0\1\76\1\0\12\76\1\0\21\76\5\0"+
    "\3\76\1\0\5\76\1\0\21\76\104\0\327\76\51\0"+
    "\65\76\13\0\336\76\2\0\u0182\76\16\0\u0131\76\37\0"+
    "\36\76\342\0\360\77\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\41\0\1\1\2\2\1\3\1\4\1\5\1\6\6\1"+
    "\1\7\2\1\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\1\1\15\1\16\1\17\1\20\3\21\1\22\1\23"+
    "\1\24\2\12\1\25\1\26\1\27\1\30\2\31\1\12"+
    "\1\32\5\12\1\33\1\12\1\34\1\35\2\12\1\36"+
    "\1\23\1\24\2\37\1\23\1\40\1\41\1\23\1\42"+
    "\1\23\2\43\1\23\1\44\1\45\11\44\1\46\1\47"+
    "\2\23\1\50\1\51\1\52\1\53\1\54\1\32\2\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\5\63"+
    "\1\65\1\66\1\67\1\70\2\67\1\71\1\72\1\23"+
    "\1\73\1\54\2\74\1\75\1\76\1\77\1\76\1\100"+
    "\1\101\1\21\1\102\1\21\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\21\1\113\1\114\1\6"+
    "\1\1\1\115\1\116\1\117\1\120\2\121\1\122\1\23"+
    "\27\0\1\123\1\124\1\125\2\126\2\127\1\15\1\130"+
    "\1\0\2\131\1\132\1\133\1\134\2\135\1\10\1\0"+
    "\1\136\1\137\2\140\2\137\1\141\1\142\1\14\4\0"+
    "\1\143\1\144\7\0\1\145\2\0\1\31\1\0\1\146"+
    "\2\0\1\31\3\0\4\31\1\0\1\147\1\0\1\150"+
    "\1\151\1\152\1\0\3\151\1\153\1\0\14\44\1\154"+
    "\1\0\1\155\1\0\1\156\1\157\1\160\1\161\1\162"+
    "\1\163\2\0\1\164\1\165\2\0\10\165\1\166\1\167"+
    "\1\170\1\171\2\0\2\172\2\0\4\63\5\173\1\63"+
    "\1\174\1\63\1\175\2\0\1\176\1\177\6\0\1\200"+
    "\1\201\1\0\3\201\2\0\1\202\1\203\10\0\1\204"+
    "\1\205\6\0\1\206\1\0\1\207\1\0\1\210\17\0"+
    "\1\211\1\212\1\213\1\214\1\215\1\216\1\14\6\0"+
    "\1\217\1\12\1\220\1\0\1\221\1\0\1\222\1\0"+
    "\1\150\1\43\1\151\1\223\4\44\2\224\7\44\2\0"+
    "\1\225\10\0\1\226\1\165\2\0\6\165\6\0\1\227"+
    "\6\0\4\165\1\227\1\162\1\165\1\55\5\165\4\0"+
    "\4\63\1\230\1\231\4\0\1\200\1\74\1\201\25\0"+
    "\1\232\1\233\1\0\1\234\1\44\2\235\2\44\2\236"+
    "\1\237\1\240\1\44\11\0\1\241\6\0\4\165\1\241"+
    "\4\165\6\0\4\165\1\0\1\165\4\164\3\0\4\172"+
    "\2\0\1\242\2\0\1\243\1\244\1\0\2\44\1\245"+
    "\1\0\1\246\1\0\1\44\6\0\4\165\4\226\4\227"+
    "\4\0\2\44\1\247\2\250\4\241\1\251\1\252\1\253"+
    "\1\0\1\254\1\255\1\253\1\256";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u0990\0\u0990\0\u09d4"+
    "\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0990\0\u0990\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0990\0\u0c38\0\u0990\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0990\0\u0d48\0\u0d8c\0\u0990\0\u0990\0\u0dd0\0\u0e14\0\u0e58"+
    "\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0990\0\u0990\0\u0990\0\u0990"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u0990\0\u0990\0\u1298\0\u12dc\0\u0990"+
    "\0\u0990\0\u1320\0\u0990\0\u1364\0\u13a8\0\u0990\0\u0990\0\u0fac"+
    "\0\u13ec\0\u1078\0\u1430\0\u1474\0\u0b6c\0\u14b8\0\u0990\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u0990\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u0990\0\u18b4"+
    "\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u0990\0\u0990\0\u1a08\0\u1a4c"+
    "\0\u1a90\0\u1ad4\0\u0990\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u0990\0\u0990\0\u0990\0\u1c6c\0\u0fac\0\u1078\0\u0990\0\u0990"+
    "\0\u0f68\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u0990\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u0990\0\u1ed0\0\u0990\0\u1f14\0\u0990\0\u0990"+
    "\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990\0\u1f58\0\u1f9c"+
    "\0\u0990\0\u1fe0\0\u2024\0\u0990\0\u0990\0\u0990\0\u0990\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2200"+
    "\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u0a18\0\u25b8\0\u2024\0\u0b28"+
    "\0\u0bb0\0\u094c\0\u094c\0\u0990\0\u0990\0\u0990\0\u25fc\0\u0990"+
    "\0\u2640\0\u2684\0\u0990\0\u26c8\0\u0990\0\u270c\0\u0990\0\u2750"+
    "\0\u0990\0\u0990\0\u2794\0\u27d8\0\u281c\0\u0990\0\u08c4\0\u0990"+
    "\0\u2860\0\u0990\0\u28a4\0\u0990\0\u0990\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u29f8\0\u0990\0\u0990\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\u0990\0\u2c18\0\u2c5c\0\u0990\0\u0f68"+
    "\0\u0990\0\u2ca0\0\u2ce4\0\u2ce4\0\u2d28\0\u2d6c\0\u0f24\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u13a8\0\u0990\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u0990\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u0990\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u0990\0\u17e8\0\u3410\0\u3454\0\u0990"+
    "\0\u0990\0\u0990\0\u0990\0\u3498\0\u0990\0\u34dc\0\u3520\0\u0990"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u0990\0\u0990\0\u0990\0\u0990\0\u3850"+
    "\0\u3894\0\u0990\0\u1ad4\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8"+
    "\0\u3a2c\0\u0990\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3a70\0\u39e8"+
    "\0\u3ab4\0\u1ad4\0\u3af8\0\u3b3c\0\u0990\0\u0990\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u0990\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u0990\0\u0990\0\u3ef4\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u0990\0\u0990"+
    "\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u0990\0\u42ac"+
    "\0\u0990\0\u42f0\0\u0990\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444"+
    "\0\u4488\0\u44cc\0\u0990\0\u4510\0\u4554\0\u0990\0\u4598\0\u45dc"+
    "\0\u4620\0\u4664\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990\0\u08c4"+
    "\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884"+
    "\0\u2d6c\0\u0990\0\u48c8\0\u0990\0\u490c\0\u0990\0\u4950\0\u4994"+
    "\0\u49d8\0\u4a1c\0\u0990\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u0990"+
    "\0\u309c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08"+
    "\0\u4d4c\0\u4d90\0\u0990\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4"+
    "\0\u4f28\0\u4f6c\0\u4fb0\0\u0990\0\u4ff4\0\u5038\0\u507c\0\u50c0"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0"+
    "\0\u5324\0\u5368\0\u53ac\0\u0990\0\u53f0\0\u5434\0\u5478\0\u54bc"+
    "\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc"+
    "\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc"+
    "\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u1ad4"+
    "\0\u1ad4\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5c70"+
    "\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90"+
    "\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u24ec"+
    "\0\u60b0\0\u60b0\0\u4620\0\u60f4\0\u6138\0\u0990\0\u0990\0\u617c"+
    "\0\u61c0\0\u6204\0\u0990\0\u309c\0\u6248\0\u628c\0\u0990\0\u309c"+
    "\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0\0\u6424\0\u6468\0\u64ac"+
    "\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u0990\0\u6600\0\u6644\0\u6688"+
    "\0\u66cc\0\u6710\0\u6754\0\u6798\0\u67dc\0\u6820\0\u6864\0\u5698"+
    "\0\u68a8\0\u68ec\0\u6930\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84"+
    "\0\u6ac8\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4"+
    "\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u6ce8\0\u6d2c\0\u6d70\0\u3850"+
    "\0\u3894\0\u38d8\0\u391c\0\u6db4\0\u6df8\0\u0990\0\u6e3c\0\u6e80"+
    "\0\u0990\0\u0990\0\u6ec4\0\u6f08\0\u6f4c\0\u0990\0\u6f90\0\u0990"+
    "\0\u6fd4\0\u7018\0\u705c\0\u70a0\0\u70e4\0\u7128\0\u716c\0\u71b0"+
    "\0\u71f4\0\u7238\0\u727c\0\u72c0\0\u6578\0\u65bc\0\u6600\0\u6644"+
    "\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u7304\0\u7348\0\u738c\0\u73d0"+
    "\0\u7414\0\u7458\0\u0990\0\u0990\0\u309c\0\u6578\0\u65bc\0\u6600"+
    "\0\u6644\0\u0990\0\u0990\0\u749c\0\u74e0\0\u14b8\0\u0990\0\u7524"+
    "\0\u0990";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\1\43\3\44\1\42\1\45\1\46\1\47\2\42"+
    "\1\45\2\42\1\50\1\51\1\42\1\52\1\53\1\54"+
    "\2\55\1\56\1\57\1\60\1\61\2\42\1\62\3\42"+
    "\1\63\1\64\1\65\1\42\1\66\1\67\6\42\1\70"+
    "\17\42\1\71\1\56\7\42\1\43\3\44\1\42\1\45"+
    "\1\46\1\47\2\42\1\45\2\42\1\50\1\51\1\42"+
    "\1\52\1\53\1\54\2\55\1\56\1\57\1\60\1\61"+
    "\2\42\1\62\3\42\1\63\1\64\1\72\1\42\1\66"+
    "\1\67\6\42\1\70\17\42\1\71\1\56\6\42\45\73"+
    "\1\74\36\73\16\75\1\76\4\75\1\77\60\75\45\100"+
    "\1\101\36\100\1\65\4\102\1\103\1\104\1\105\1\106"+
    "\1\65\1\107\1\110\2\65\1\111\2\65\1\112\1\113"+
    "\1\114\2\115\1\116\1\65\1\117\1\120\1\121\2\65"+
    "\3\122\1\123\2\65\1\124\1\125\1\65\23\122\1\65"+
    "\1\126\1\65\1\127\1\102\1\122\3\65\1\130\1\65"+
    "\1\131\1\132\2\133\1\134\1\131\1\135\1\131\1\136"+
    "\3\131\1\137\1\131\1\140\3\131\1\141\1\142\1\143"+
    "\1\144\2\131\1\145\4\131\3\146\1\147\3\131\1\146"+
    "\1\67\1\150\1\146\1\151\2\146\1\152\1\146\1\153"+
    "\1\154\1\146\1\155\3\146\1\156\1\157\1\146\1\160"+
    "\1\146\1\161\4\131\1\146\6\131\4\162\1\163\1\164"+
    "\1\131\1\136\3\131\1\137\1\131\1\165\1\166\1\167"+
    "\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177"+
    "\1\200\1\201\2\131\3\202\1\203\3\131\1\204\1\67"+
    "\1\205\6\202\1\206\2\202\1\207\1\210\7\202\1\161"+
    "\3\131\1\162\1\202\2\131\1\170\3\131\4\162\11\131"+
    "\1\140\4\131\1\142\14\131\1\211\30\131\1\212\3\131"+
    "\1\162\6\131\1\213\4\214\11\213\1\215\4\213\1\216"+
    "\14\213\1\217\30\213\1\220\3\213\1\214\6\213\1\131"+
    "\4\214\1\163\1\221\1\131\1\136\3\131\1\137\1\222"+
    "\1\165\1\166\1\167\1\170\1\223\1\172\1\224\1\225"+
    "\1\175\1\226\1\177\1\200\1\201\2\131\3\227\1\203"+
    "\1\131\1\230\1\131\1\231\1\67\23\227\1\161\1\131"+
    "\1\232\1\131\1\214\1\227\2\131\1\170\3\131\1\132"+
    "\2\133\1\134\1\163\1\221\1\131\1\136\3\131\1\137"+
    "\1\222\1\165\1\166\1\167\1\170\1\223\1\172\1\224"+
    "\1\225\1\175\1\176\1\177\1\200\1\201\2\131\3\227"+
    "\1\203\1\131\1\230\1\131\1\231\1\67\23\227\1\161"+
    "\1\131\1\232\2\131\1\227\2\131\1\170\3\131\4\102"+
    "\1\163\1\221\1\131\1\136\3\131\1\137\1\222\1\165"+
    "\1\166\1\167\1\170\1\223\1\172\1\224\1\225\1\175"+
    "\1\176\1\177\1\200\1\201\2\131\3\227\1\203\1\131"+
    "\1\230\1\131\1\231\1\67\23\227\1\161\1\131\1\232"+
    "\1\131\1\102\1\227\2\131\1\170\2\131\24\233\2\234"+
    "\7\233\3\234\6\233\23\234\2\233\1\235\10\233\5\75"+
    "\1\236\1\75\5\236\1\237\1\240\12\236\1\241\1\236"+
    "\1\240\5\236\1\242\1\75\1\240\1\75\1\236\1\75"+
    "\23\236\1\243\1\75\1\240\10\75\5\244\1\75\1\244"+
    "\5\75\1\237\1\245\12\75\1\241\1\75\1\244\5\75"+
    "\1\242\3\244\1\75\1\244\23\75\1\243\17\244\1\75"+
    "\1\244\5\75\1\237\1\244\12\75\1\241\1\75\1\244"+
    "\5\75\1\242\1\244\1\245\1\244\1\75\1\244\23\75"+
    "\1\243\17\244\1\75\1\244\5\75\1\237\1\244\12\75"+
    "\1\241\1\75\1\244\5\75\1\242\3\244\1\75\1\244"+
    "\23\75\1\243\1\244\1\245\15\244\1\75\1\244\5\75"+
    "\1\237\1\244\12\75\1\241\1\75\1\244\5\75\1\242"+
    "\3\244\1\75\1\244\23\75\1\243\12\244\21\246\2\247"+
    "\1\246\3\247\3\246\1\250\2\246\3\247\4\246\1\247"+
    "\1\246\23\247\5\246\3\247\3\246\40\251\1\147\43\251"+
    "\1\42\1\43\3\44\1\42\1\45\1\46\1\47\2\42"+
    "\1\45\2\42\1\252\1\51\1\42\1\52\1\53\1\253"+
    "\2\55\1\254\1\57\1\60\1\61\2\42\1\62\3\42"+
    "\1\255\1\64\1\256\1\42\1\66\1\67\6\42\1\70"+
    "\17\42\1\71\1\56\6\42\1\213\4\162\7\213\1\257"+
    "\1\213\1\215\4\213\1\216\11\213\3\260\4\213\1\261"+
    "\1\213\23\260\4\213\1\162\1\260\6\213\4\162\30\213"+
    "\3\262\4\213\1\262\1\213\23\262\4\213\1\162\1\262"+
    "\6\213\4\162\33\213\1\217\30\213\1\220\3\213\1\162"+
    "\6\213\1\131\4\162\10\131\1\222\24\131\1\230\7\131"+
    "\1\263\20\131\1\232\1\131\1\162\6\131\22\0\1\264"+
    "\1\0\2\265\56\0\10\266\1\267\3\266\1\270\1\266"+
    "\2\267\1\266\1\271\1\266\1\267\2\0\2\266\1\267"+
    "\1\272\1\273\2\266\3\274\1\270\3\266\1\274\1\266"+
    "\23\274\5\266\1\274\2\0\1\267\2\266\22\0\1\275"+
    "\1\0\2\276\102\0\1\277\1\300\102\0\1\301\1\302"+
    "\64\0\1\303\132\0\3\304\4\0\1\304\1\0\23\304"+
    "\5\0\1\304\5\0\1\42\4\0\1\42\3\0\2\42"+
    "\1\0\2\42\2\0\1\42\11\0\2\42\1\0\3\42"+
    "\1\0\1\42\1\0\1\42\2\0\6\42\1\0\17\42"+
    "\2\0\6\42\1\0\1\43\15\0\1\305\1\0\1\306"+
    "\1\0\1\307\2\310\3\0\1\311\53\0\1\312\3\313"+
    "\203\0\23\314\1\315\3\0\17\314\1\0\5\314\1\0"+
    "\1\314\1\0\3\314\1\0\15\314\1\0\3\314\1\0"+
    "\3\316\1\317\70\0\1\316\7\0\3\320\1\321\14\0"+
    "\1\322\2\0\2\323\5\0\1\71\41\0\1\320\2\0"+
    "\1\323\25\0\1\324\62\0\3\325\1\326\11\0\1\327"+
    "\4\0\1\330\51\0\1\325\30\0\1\305\1\0\2\310"+
    "\77\0\1\331\2\0\2\331\7\0\3\331\4\0\1\331"+
    "\1\0\23\331\5\0\3\331\4\0\3\332\1\333\24\0"+
    "\1\311\43\0\1\332\27\0\1\334\1\335\1\0\2\334"+
    "\1\335\6\0\3\334\1\336\3\0\1\334\1\0\23\334"+
    "\5\0\3\334\3\0\1\337\3\340\1\341\1\337\3\342"+
    "\2\337\1\342\2\337\2\342\1\337\11\342\2\337\1\342"+
    "\3\337\1\342\1\337\1\342\1\337\2\342\6\337\1\342"+
    "\11\337\1\343\5\337\1\342\1\340\5\337\1\42\24\344"+
    "\3\0\17\344\1\0\5\344\1\0\1\344\1\0\3\344"+
    "\1\0\15\344\1\0\3\344\45\345\1\346\36\345\65\0"+
    "\1\347\17\0\1\350\3\351\1\352\2\0\1\353\3\0"+
    "\1\354\1\0\2\353\1\0\1\353\1\355\1\353\4\0"+
    "\1\353\1\356\1\353\5\0\1\354\5\0\1\357\3\0"+
    "\1\360\2\0\1\361\2\0\1\362\1\363\13\0\1\351"+
    "\3\0\1\353\2\0\45\73\1\0\36\73\23\0\1\364"+
    "\76\0\1\327\65\0\45\100\1\365\103\100\1\366\36\100"+
    "\1\0\4\102\70\0\1\102\37\0\1\367\52\0\6\370"+
    "\1\371\32\370\1\372\42\370\23\0\1\315\101\0\1\373"+
    "\10\0\1\374\73\0\1\375\77\0\1\327\4\0\1\330"+
    "\102\0\1\376\1\0\2\115\104\0\1\377\2\0\1\367"+
    "\73\0\1\u0100\6\0\1\u0101\1\u0102\42\0\1\u0103\35\0"+
    "\1\367\2\0\1\373\1\367\72\0\1\373\7\0\1\367"+
    "\1\374\72\0\1\122\2\0\2\122\7\0\3\122\4\0"+
    "\1\122\1\0\23\122\5\0\3\122\75\0\1\367\32\0"+
    "\1\373\7\0\1\373\10\0\1\367\27\0\1\367\43\0"+
    "\1\367\41\0\1\373\10\0\1\132\104\0\1\133\101\0"+
    "\6\u0104\1\u0105\32\u0104\1\u0106\42\u0104\24\0\2\u0107\67\0"+
    "\1\u0108\2\0\1\u0109\5\0\1\u010a\1\0\2\144\7\0"+
    "\1\u010b\1\u010c\1\u010b\1\u0109\5\0\1\u010b\1\u010d\2\u010b"+
    "\1\u010c\6\u010b\1\u010d\6\u010b\1\u010d\24\0\1\u0108\2\0"+
    "\1\u0109\5\0\1\u010a\1\0\2\144\7\0\1\u010b\1\u010c"+
    "\1\u010b\1\u0109\5\0\4\u010b\1\u010c\16\u010b\27\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\23\146\5\0\3\146\17\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\20\146\1\u0110\2\146\5\0\3\146"+
    "\17\0\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0"+
    "\3\146\1\u010e\3\0\1\146\1\0\13\146\1\u0111\7\146"+
    "\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f\1\0"+
    "\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0\1\u0112"+
    "\12\146\1\u0113\7\146\5\0\3\146\17\0\1\u010e\4\0"+
    "\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0"+
    "\1\146\1\0\5\146\1\u0114\3\146\1\u0115\1\u0116\10\146"+
    "\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f\1\0"+
    "\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0\4\146"+
    "\1\u0117\16\146\5\0\3\146\17\0\1\u010e\4\0\1\146"+
    "\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146"+
    "\1\0\13\146\1\u0118\7\146\5\0\3\146\17\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\4\146\1\u0117\1\146\1\u0119\14\146"+
    "\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f\1\0"+
    "\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0\15\146"+
    "\1\u011a\5\146\5\0\3\146\17\0\1\u010e\4\0\1\146"+
    "\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146"+
    "\1\0\6\146\1\u011b\14\146\5\0\3\146\4\0\4\162"+
    "\70\0\1\162\37\0\1\u011c\52\0\6\u011d\1\u011e\32\u011d"+
    "\1\u011f\42\u011d\23\0\1\315\5\0\1\u0120\103\0\1\u0121"+
    "\103\0\1\u0122\74\0\1\u0123\1\0\2\u0124\74\0\1\327"+
    "\4\0\1\330\5\0\1\u0125\53\0\1\u0126\3\0\1\u0127"+
    "\2\0\1\u0128\1\u0129\2\0\1\u0128\1\0\2\u0128\1\0"+
    "\1\u0128\1\u012a\1\u0128\2\174\2\0\1\u0128\1\u012b\1\u0128"+
    "\2\0\1\u012c\1\u012d\1\u012c\1\u0128\5\0\1\u012e\1\u012f"+
    "\2\u012c\1\u012d\2\u012c\1\u0130\2\u012c\1\u0131\1\u0132\6\u012c"+
    "\1\u012f\10\0\1\u0128\3\0\1\u0126\3\0\1\u0127\2\0"+
    "\1\u0128\1\u0129\2\0\1\u0128\1\0\2\u0128\1\0\1\u0128"+
    "\1\u012a\1\u0128\2\174\2\0\1\u0128\1\u012b\1\u0128\2\0"+
    "\1\u012c\1\u012d\1\u012c\1\u0128\5\0\1\u012e\3\u012c\1\u012d"+
    "\2\u012c\1\u0130\2\u012c\1\u0131\1\u0133\7\u012c\10\0\1\u0128"+
    "\23\0\2\331\1\0\3\331\2\0\1\u0134\3\0\3\331"+
    "\4\0\1\331\1\0\23\331\5\0\3\331\34\0\1\u0135"+
    "\1\u0136\102\0\1\u0137\53\0\1\u0138\3\0\1\u0139\2\0"+
    "\1\u013a\3\0\1\u013a\1\0\2\u013a\1\0\1\u013b\1\u013c"+
    "\1\u013a\2\202\2\0\1\u013a\1\u013d\1\u013a\2\0\3\202"+
    "\1\u013a\3\0\1\202\1\0\1\u013e\6\202\1\u013f\2\202"+
    "\1\u0140\1\u0141\7\202\5\0\3\202\1\u013a\2\0\1\u0142"+
    "\1\u0143\3\u0142\1\u0144\13\u0142\1\u013b\1\u0145\1\u0142\2\202"+
    "\3\u0142\1\u0146\3\u0142\3\202\4\u0142\1\202\1\u0142\1\u013e"+
    "\6\202\1\u013f\2\202\1\u0140\1\u0141\7\202\5\u0142\3\202"+
    "\3\u0142\1\0\1\u0138\3\0\1\u0139\2\0\1\u013a\3\0"+
    "\1\u013a\1\0\2\u013a\1\0\1\u013b\1\u013c\1\u013a\2\202"+
    "\2\0\1\u013a\1\u013d\1\u013a\2\0\3\202\1\u013a\3\0"+
    "\1\202\1\0\1\u013e\6\202\1\u013f\2\202\1\u0147\1\u0141"+
    "\7\202\5\0\3\202\1\u013a\3\0\1\u0138\3\0\1\u0139"+
    "\2\0\1\u013a\3\0\1\u013a\1\0\2\u013a\1\0\1\u013b"+
    "\1\u013c\1\u013a\2\202\2\0\1\u013a\1\u013d\1\u013a\2\0"+
    "\3\202\1\u013a\3\0\1\202\1\0\1\u013e\6\202\1\u013f"+
    "\2\202\1\u0148\1\u0141\7\202\5\0\3\202\1\u013a\3\0"+
    "\1\u0138\3\0\1\u0139\2\0\1\u013a\3\0\1\u013a\1\0"+
    "\2\u013a\1\0\1\u013b\1\u013c\1\u013a\2\202\2\0\1\u013a"+
    "\1\u013d\1\u013a\2\0\3\202\1\u013a\3\0\1\202\1\0"+
    "\1\u013e\6\202\1\u013f\2\202\1\u0140\1\u0149\7\202\5\0"+
    "\3\202\1\u013a\3\0\1\u0138\3\0\1\u0139\2\0\1\u013a"+
    "\3\0\1\u013a\1\0\2\u013a\1\0\1\u013b\1\u013c\1\u013a"+
    "\2\202\2\0\1\u013a\1\u013d\1\u013a\2\0\3\202\1\u013a"+
    "\3\0\1\202\1\0\1\u013e\6\202\1\u013f\2\202\1\u0140"+
    "\1\u0141\1\202\1\u014a\5\202\5\0\3\202\1\u013a\3\0"+
    "\4\214\70\0\1\214\7\0\1\u014b\3\0\1\u014c\2\0"+
    "\1\u014d\3\0\1\u014e\1\0\2\u014d\1\0\1\u014d\1\u014f"+
    "\1\u014d\4\0\1\u014d\1\u0150\1\u014d\5\0\1\u014e\5\0"+
    "\1\u0151\6\0\1\u0152\2\0\1\u0153\1\u0154\17\0\1\u014d"+
    "\24\0\1\u0123\1\0\2\u0155\67\0\1\u0156\10\0\1\u0157"+
    "\1\0\2\225\7\0\1\u0158\1\u0159\1\u0158\6\0\1\u0158"+
    "\1\u015a\2\u0158\1\u0159\6\u0158\1\u015a\6\u0158\1\u015a\24\0"+
    "\1\u0156\10\0\1\u0157\1\0\2\225\7\0\1\u0158\1\u0159"+
    "\1\u0158\6\0\4\u0158\1\u0159\16\u0158\34\0\1\227\2\0"+
    "\2\227\7\0\3\227\4\0\1\227\1\0\23\227\5\0"+
    "\3\227\4\0\1\u015b\3\0\1\u015c\2\0\1\u015d\3\0"+
    "\1\u015e\1\0\2\u015d\1\0\1\u015d\1\u015f\1\u015d\4\0"+
    "\1\u015d\1\u0160\1\u015d\5\0\1\u015e\5\0\1\u0161\6\0"+
    "\1\u0162\2\0\1\u0163\1\u0164\17\0\1\u015d\2\0\21\u0142"+
    "\1\227\2\u0142\2\227\7\u0142\3\227\4\u0142\1\227\1\u0142"+
    "\23\227\5\u0142\3\227\3\u0142\1\0\1\u0165\3\0\1\u0166"+
    "\2\0\1\u0167\3\0\1\u0168\1\0\2\u0167\1\0\1\u0167"+
    "\1\u0169\1\u0167\4\0\1\u0167\1\u016a\1\u0167\5\0\1\u0168"+
    "\5\0\1\u016b\6\0\1\u016c\2\0\1\u016d\1\u016e\17\0"+
    "\1\u0167\26\0\2\234\7\0\3\234\6\0\23\234\13\0"+
    "\5\u016f\1\0\1\u016f\5\0\2\u016f\4\0\1\u0170\5\0"+
    "\1\u016f\1\0\1\u016f\5\0\4\u016f\1\0\1\u016f\23\0"+
    "\13\u016f\21\0\2\247\1\0\3\247\6\0\3\247\4\0"+
    "\1\247\1\0\23\247\5\0\3\247\17\0\1\u0171\5\0"+
    "\1\u0172\15\0\1\u0171\43\0\24\314\3\0\17\314\1\0"+
    "\5\314\1\0\1\314\1\0\3\314\1\0\15\314\1\0"+
    "\3\314\1\0\3\325\1\326\70\0\1\325\27\0\1\260"+
    "\2\0\2\260\7\0\3\260\4\0\1\260\1\0\23\260"+
    "\5\0\3\260\3\0\21\u0173\1\260\2\u0173\2\260\7\u0173"+
    "\3\260\4\u0173\1\260\1\u0173\23\260\5\u0173\3\260\3\u0173"+
    "\21\0\1\262\2\0\2\262\7\0\3\262\4\0\1\262"+
    "\1\0\23\262\5\0\3\262\61\0\1\u0174\51\0\2\u0175"+
    "\100\0\1\264\1\0\2\265\10\0\1\u0176\13\0\1\u0176"+
    "\102\0\1\u0177\6\0\1\u0178\2\0\1\u0179\1\0\1\u017a"+
    "\17\0\1\271\47\0\1\u0177\6\0\1\u0178\2\0\1\u0179"+
    "\1\0\1\u017a\17\0\1\271\107\0\1\271\23\0\1\271"+
    "\17\0\1\u0177\6\0\1\u0178\2\0\1\u0179\1\0\1\u017a"+
    "\17\0\1\271\27\0\1\271\17\0\1\u0177\6\0\1\u0178"+
    "\2\0\1\u0179\1\0\1\u017a\40\0\1\u017b\105\0\2\u017c"+
    "\100\0\1\275\1\0\2\276\10\0\1\u017d\13\0\1\u017d"+
    "\42\0\1\u017e\12\0\2\300\7\0\3\u017f\6\0\1\u017f"+
    "\1\u0180\11\u017f\1\u0180\6\u017f\1\u0180\24\0\1\u017e\12\0"+
    "\2\300\7\0\3\u017f\6\0\23\u017f\37\0\2\302\21\0"+
    "\1\u0181\11\0\1\u0181\6\0\1\u0181\37\0\2\302\56\0"+
    "\6\303\1\u017e\32\303\1\u0182\42\303\21\0\1\304\2\0"+
    "\2\304\7\0\3\304\4\0\1\304\1\0\23\304\5\0"+
    "\3\304\4\0\3\320\1\321\70\0\1\320\10\0\1\u0183"+
    "\103\0\1\u0184\122\0\1\71\104\0\1\71\63\0\1\u0185"+
    "\101\0\2\330\3\0\77\330\2\0\1\u0186\122\0\1\334"+
    "\1\335\1\0\2\334\1\335\6\0\3\334\1\u0187\3\0"+
    "\1\334\1\0\23\334\5\0\3\334\24\0\1\334\1\335"+
    "\1\0\2\334\1\335\6\0\3\334\4\0\1\334\1\0"+
    "\23\334\5\0\3\334\5\0\1\340\101\0\1\42\4\0"+
    "\1\42\3\0\2\42\1\0\2\42\2\0\1\42\11\0"+
    "\2\42\1\0\3\42\1\0\1\42\1\0\1\42\2\0"+
    "\6\42\1\0\14\42\1\u0188\2\42\2\0\6\42\45\345"+
    "\1\u0189\36\345\65\0\1\u018a\17\0\1\350\3\351\1\352"+
    "\2\0\1\353\5\0\2\353\1\0\1\353\1\0\1\353"+
    "\4\0\1\353\1\356\1\353\13\0\1\357\3\0\1\360"+
    "\2\0\1\361\2\0\1\362\1\363\13\0\1\351\3\0"+
    "\1\353\3\0\4\351\45\0\1\360\22\0\1\351\37\0"+
    "\1\353\107\0\3\354\4\0\1\354\1\0\23\354\5\0"+
    "\1\354\36\0\2\353\131\0\1\u018b\101\0\1\u018c\105\0"+
    "\1\u018d\104\0\1\u018e\105\0\1\u018d\20\0\45\100\1\u018f"+
    "\103\100\1\u0190\36\100\2\370\3\0\76\370\33\0\1\367"+
    "\73\0\1\367\105\0\2\u0191\77\0\1\374\6\0\1\367"+
    "\1\0\1\367\72\0\1\367\6\0\1\367\104\0\1\374"+
    "\1\367\145\0\1\367\7\0\2\u0104\3\0\76\u0104\12\0"+
    "\1\u0108\2\0\1\u0192\5\0\1\u0193\1\0\2\u0107\7\0"+
    "\1\u010b\1\u010c\1\u010b\1\u0192\5\0\4\u010b\1\u010c\16\u010b"+
    "\27\0\1\u0194\5\0\1\u0195\15\0\1\u0194\67\0\2\u0107"+
    "\7\0\3\u0196\4\0\1\u0196\1\0\23\u0196\5\0\1\u0196"+
    "\21\0\1\u0194\5\0\1\u0195\12\0\3\u010b\1\u0194\5\0"+
    "\23\u010b\27\0\1\u0194\2\0\1\u0197\1\0\1\u0197\1\u0195"+
    "\1\0\2\u0198\7\0\3\u010b\1\u0194\5\0\23\u010b\27\0"+
    "\1\u0194\5\0\1\u0195\1\0\2\u0199\7\0\2\u019a\1\u010b"+
    "\1\u0194\5\0\6\u019a\15\u010b\50\0\3\u019b\4\0\1\u019b"+
    "\1\0\23\u019b\5\0\1\u019b\21\0\1\u010e\4\0\1\146"+
    "\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146"+
    "\1\0\17\146\1\u019c\3\146\5\0\3\146\17\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\12\146\1\u019d\10\146\5\0\3\146"+
    "\17\0\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0"+
    "\3\146\1\u010e\3\0\1\146\1\0\10\146\1\u019e\12\146"+
    "\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f\1\0"+
    "\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0\15\146"+
    "\1\u019f\5\146\5\0\3\146\3\0\21\u01a0\1\146\1\u01a1"+
    "\1\u01a0\2\146\7\u01a0\3\146\4\u01a0\1\146\1\u01a0\23\146"+
    "\5\u01a0\3\146\3\u01a0\14\0\1\u010e\4\0\1\146\1\u010f"+
    "\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0"+
    "\14\146\1\u01a2\6\146\5\0\3\146\17\0\1\u010e\4\0"+
    "\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0"+
    "\1\146\1\0\2\146\1\u01a3\20\146\5\0\3\146\17\0"+
    "\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146"+
    "\1\u010e\3\0\1\146\1\0\17\146\1\u01a4\3\146\5\0"+
    "\3\146\17\0\1\u010e\4\0\1\146\1\u010f\1\0\2\146"+
    "\7\0\3\146\1\u010e\3\0\1\146\1\0\12\146\1\u01a5"+
    "\10\146\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f"+
    "\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0"+
    "\13\146\1\u01a6\7\146\5\0\3\146\17\0\1\u010e\4\0"+
    "\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0"+
    "\1\146\1\0\20\146\1\u01a7\2\146\5\0\3\146\17\0"+
    "\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146"+
    "\1\u010e\3\0\1\146\1\0\7\146\1\u01a8\13\146\5\0"+
    "\3\146\4\0\1\u01a9\3\0\1\u01aa\2\0\1\u01ab\3\0"+
    "\1\u01ab\1\0\2\u01ab\1\0\1\u01ab\1\u01ac\1\u01ab\4\0"+
    "\1\u01ab\1\u01ad\1\u01ab\5\0\1\u01ab\5\0\1\u01ae\6\0"+
    "\1\u01af\2\0\1\u01b0\1\u01b1\17\0\1\u01ab\2\0\2\u011d"+
    "\3\0\76\u011d\2\0\1\u01b2\3\0\1\u01b3\2\0\1\u01b4"+
    "\1\u01b5\2\0\1\u01b4\1\0\2\u01b4\1\0\1\u01b4\1\u01b6"+
    "\1\u01b4\2\u0124\2\0\1\u01b4\1\u01b7\1\u01b4\2\0\1\u01b8"+
    "\1\u01b9\1\u01b8\1\u01b4\5\0\1\u01ba\3\u01b8\1\u01b9\2\u01b8"+
    "\1\u01bb\2\u01b8\1\u01bc\1\u01bd\7\u01b8\10\0\1\u01b4\3\0"+
    "\1\u0126\3\0\1\u0127\2\0\1\u0128\5\0\2\u0128\1\0"+
    "\1\u0128\1\0\1\u0128\4\0\1\u0128\1\u012b\1\u0128\13\0"+
    "\1\u01be\6\0\1\u01bf\2\0\1\u01c0\1\u01c1\17\0\1\u0128"+
    "\33\0\1\u0128\53\0\1\u01c2\3\0\1\u01c3\2\0\1\u01c4"+
    "\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5\1\u01c4"+
    "\4\0\1\u01c4\1\u01c6\1\u01c4\5\0\1\u01c4\5\0\1\u01c7"+
    "\6\0\1\u01c8\2\0\1\u01c9\1\u01ca\17\0\1\u01c4\26\0"+
    "\2\u0124\7\0\3\u0128\4\0\1\u0128\1\0\23\u0128\5\0"+
    "\1\u0128\36\0\2\u0128\52\0\1\u01c2\3\0\1\u01c3\2\0"+
    "\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5"+
    "\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c\1\u01c4"+
    "\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u01ce\7\u012c"+
    "\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3\2\0\1\u01c4"+
    "\3\0\1\u01c4\1\0\1\u01c4\1\u01cf\1\0\1\u01cf\1\u01c5"+
    "\1\u01c4\2\u01d0\2\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c"+
    "\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u01ce"+
    "\7\u012c\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3\2\0"+
    "\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5"+
    "\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c\1\u01c4"+
    "\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01d1\1\u01ce\7\u012c"+
    "\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3\2\0\1\u01c4"+
    "\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5\1\u01c4"+
    "\2\u01d2\2\0\1\u01c4\1\u01c6\1\u01c4\2\0\2\u01d3\1\u012c"+
    "\1\u01c4\5\0\1\u01d4\5\u01d3\1\u012c\1\u01cc\2\u012c\1\u01cd"+
    "\1\u01ce\7\u012c\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3"+
    "\2\0\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4"+
    "\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c"+
    "\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01d5\1\u01ce"+
    "\7\u012c\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3\2\0"+
    "\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5"+
    "\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c\1\u01c4"+
    "\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u01d6\7\u012c"+
    "\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3\2\0\1\u01c4"+
    "\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5\1\u01c4"+
    "\2\u01d2\2\0\1\u01c4\1\u01c6\1\u01c4\2\0\2\u01d3\1\u012c"+
    "\1\u01c4\5\0\1\u01d4\5\u01d3\1\u012c\1\u01cc\2\u012c\1\u01cd"+
    "\1\u01ce\1\u012c\1\u01d7\5\u012c\10\0\1\u01c4\3\0\1\u01c2"+
    "\3\0\1\u01c3\2\0\1\u01c4\3\0\1\u01c4\1\0\2\u01c4"+
    "\1\0\1\u01c4\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4"+
    "\2\0\3\u012c\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c"+
    "\1\u01cd\1\u01ce\1\u012c\1\u01d7\5\u012c\10\0\1\u01c4\3\0"+
    "\1\u0138\3\0\1\u0139\2\0\1\u013a\5\0\2\u013a\1\0"+
    "\1\u013a\1\0\1\u013a\4\0\1\u013a\1\u013d\1\u013a\13\0"+
    "\1\u01d8\6\0\1\u01d9\2\0\1\u01da\1\u01db\17\0\1\u013a"+
    "\33\0\1\u013a\107\0\3\u013a\4\0\1\u013a\1\0\23\u013a"+
    "\5\0\1\u013a\36\0\2\u013a\52\0\1\u0138\3\0\1\u0139"+
    "\2\0\1\u013a\3\0\1\u013a\1\0\2\u013a\1\0\1\u013b"+
    "\1\u013c\1\u013a\2\202\2\0\1\u013a\1\u013d\1\u013a\2\0"+
    "\3\202\1\u013a\3\0\1\202\1\0\1\u013e\6\202\1\u013f"+
    "\2\202\1\u01dc\1\u0141\7\202\5\0\3\202\1\u013a\3\0"+
    "\1\u0138\3\0\1\u0139\2\0\1\u013a\3\0\1\u013a\1\0"+
    "\2\u013a\1\0\1\u013b\1\u013c\1\u013a\2\202\2\0\1\u013a"+
    "\1\u013d\1\u013a\2\0\3\202\1\u013a\3\0\1\202\1\0"+
    "\1\u013e\6\202\1\u013f\2\202\1\u01dd\1\u0141\7\202\5\0"+
    "\3\202\1\u013a\3\0\1\u0138\3\0\1\u0139\2\0\1\u013a"+
    "\3\0\1\u013a\1\0\2\u013a\1\0\1\u013b\1\u013c\1\u013a"+
    "\2\202\2\0\1\u013a\1\u013d\1\u013a\2\0\3\202\1\u013a"+
    "\3\0\1\202\1\0\1\u013e\6\202\1\u013f\2\202\1\u0140"+
    "\1\u01de\7\202\5\0\3\202\1\u013a\3\0\1\u0138\3\0"+
    "\1\u0139\2\0\1\u013a\3\0\1\u013a\1\0\2\u013a\1\0"+
    "\1\u013b\1\u013c\1\u013a\2\202\2\0\1\u013a\1\u013d\1\u013a"+
    "\2\0\3\202\1\u013a\3\0\1\202\1\0\1\u013e\6\202"+
    "\1\u013f\2\202\1\u0140\1\u0141\1\202\1\u01df\5\202\5\0"+
    "\3\202\1\u013a\3\0\1\u0138\3\0\1\u0139\2\0\1\u013a"+
    "\3\0\1\u013a\1\0\2\u013a\1\0\1\u013b\1\u013c\1\u013a"+
    "\2\202\2\0\1\u013a\1\u013d\1\u013a\2\0\3\202\1\u013a"+
    "\3\0\1\202\1\0\1\u013e\2\202\1\u01e0\3\202\1\u013f"+
    "\2\202\1\u0140\1\u01de\7\202\5\0\3\202\1\u013a\3\0"+
    "\1\u0138\3\0\1\u0139\2\0\1\u013a\3\0\1\u013a\1\0"+
    "\2\u013a\1\0\1\u013b\1\u013c\1\u013a\2\202\2\0\1\u013a"+
    "\1\u013d\1\u013a\2\0\3\202\1\u013a\3\0\1\202\1\0"+
    "\1\u013e\6\202\1\u013f\2\202\1\u0140\1\u0141\1\202\1\u01df"+
    "\1\202\1\u01e1\3\202\5\0\3\202\1\u013a\3\0\1\u014b"+
    "\3\0\1\u014c\2\0\1\u014d\5\0\2\u014d\1\0\1\u014d"+
    "\1\0\1\u014d\4\0\1\u014d\1\u0150\1\u014d\13\0\1\u0151"+
    "\6\0\1\u0152\2\0\1\u0153\1\u0154\17\0\1\u014d\33\0"+
    "\1\u014d\107\0\3\u014e\4\0\1\u014e\1\0\23\u014e\5\0"+
    "\1\u014e\36\0\2\u014d\131\0\1\u01e2\103\0\1\u01e3\104\0"+
    "\1\u01e4\105\0\1\u01e3\31\0\1\u0156\12\0\2\u0155\7\0"+
    "\1\u0158\1\u0159\1\u0158\6\0\4\u0158\1\u0159\16\u0158\37\0"+
    "\2\u0155\113\0\3\u0158\6\0\23\u0158\32\0\1\u01e5\1\0"+
    "\1\u01e5\2\0\2\u01e6\7\0\3\u0158\6\0\23\u0158\37\0"+
    "\2\u01e7\7\0\2\u01e8\1\u0158\6\0\6\u01e8\15\u0158\14\0"+
    "\1\u01e9\3\0\1\u015c\2\0\1\u015d\5\0\2\u015d\1\0"+
    "\1\u015d\1\0\1\u015d\4\0\1\u015d\1\u0160\1\u015d\13\0"+
    "\1\u0161\3\0\1\u01ea\2\0\1\u0162\2\0\1\u0163\1\u0164"+
    "\17\0\1\u015d\33\0\1\u015d\107\0\3\u015e\4\0\1\u015e"+
    "\1\0\23\u015e\5\0\1\u015e\36\0\2\u015d\131\0\1\u01eb"+
    "\103\0\1\u01ec\104\0\1\u01ed\105\0\1\u01ec\21\0\1\u01ee"+
    "\3\0\1\u0166\2\0\1\u0167\5\0\2\u0167\1\0\1\u0167"+
    "\1\0\1\u0167\4\0\1\u0167\1\u016a\1\u0167\13\0\1\u016b"+
    "\3\0\1\u01ef\2\0\1\u016c\2\0\1\u016d\1\u016e\17\0"+
    "\1\u0167\33\0\1\u0167\107\0\3\u0168\4\0\1\u0168\1\0"+
    "\23\u0168\5\0\1\u0168\36\0\2\u0167\131\0\1\u01f0\103\0"+
    "\1\u01f1\104\0\1\u01f2\105\0\1\u01f1\20\0\5\u016f\1\0"+
    "\1\u016f\5\0\1\u016f\5\0\1\u0170\5\0\1\u016f\1\0"+
    "\1\u016f\5\0\2\u016f\1\0\1\u016f\1\0\1\u016f\23\0"+
    "\2\u016f\1\0\10\u016f\35\0\3\u0171\4\0\1\u0171\1\0"+
    "\23\u0171\5\0\1\u0171\71\0\1\u01f3\30\0\1\u017e\12\0"+
    "\2\u0175\7\0\1\u017f\1\u01f4\1\u017f\6\0\4\u017f\1\u01f4"+
    "\16\u017f\32\0\1\u01f5\1\0\1\u01f5\2\0\2\300\136\0"+
    "\1\u01f6\100\0\1\271\107\0\1\271\103\0\1\u01f7\46\0"+
    "\2\u017c\10\0\1\u017d\13\0\1\u017d\50\0\1\u01f8\1\0"+
    "\1\u01f8\2\0\2\302\113\0\3\u017f\6\0\23\u017f\37\0"+
    "\2\u01f9\7\0\2\u01fa\1\u017f\6\0\6\u01fa\15\u017f\37\0"+
    "\2\u01fb\7\0\2\u01fb\7\0\6\u01fb\30\0\2\303\3\0"+
    "\76\303\46\0\1\u0189\120\0\1\u01fc\72\0\1\u018d\116\0"+
    "\1\u01fd\17\0\21\353\1\0\2\353\2\0\7\353\3\0"+
    "\4\353\1\0\1\353\23\0\5\353\3\0\3\353\65\0"+
    "\1\u018d\16\0\45\100\1\0\36\100\45\0\1\u0190\73\0"+
    "\3\u01fe\4\0\1\u01fe\1\0\23\u01fe\5\0\1\u01fe\42\0"+
    "\3\u01ff\4\0\1\u01ff\1\0\23\u01ff\5\0\1\u01ff\31\0"+
    "\2\u0198\67\0\1\u0108\2\0\1\u0192\5\0\1\u0193\1\0"+
    "\2\u0198\7\0\3\u010b\1\u0192\5\0\23\u010b\24\0\1\u0108"+
    "\2\0\1\u0109\5\0\1\u0200\1\0\2\u0199\7\0\2\u019a"+
    "\1\u010b\1\u0109\5\0\6\u019a\15\u010b\24\0\1\u0108\2\0"+
    "\1\u0194\5\0\1\u0195\1\0\2\u0199\7\0\2\u019a\1\u010b"+
    "\1\u0194\5\0\6\u019a\15\u010b\27\0\1\u010e\4\0\1\146"+
    "\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146"+
    "\1\0\13\146\1\u0201\7\146\5\0\3\146\17\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\17\146\1\u0202\3\146\5\0\3\146"+
    "\17\0\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0"+
    "\3\146\1\u010e\3\0\1\146\1\0\16\146\1\u01a7\4\146"+
    "\5\0\3\146\3\0\21\u0203\1\146\1\u0204\1\u0203\2\146"+
    "\7\u0203\3\146\4\u0203\1\146\1\u0203\23\146\5\u0203\3\146"+
    "\3\u0203\14\0\1\u010e\4\0\1\146\1\u010f\1\0\2\146"+
    "\7\0\3\146\1\u010e\3\0\1\146\1\0\13\146\1\u0205"+
    "\7\146\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f"+
    "\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0"+
    "\10\146\1\u0206\12\146\5\0\3\146\3\0\21\u0207\1\146"+
    "\1\u0208\1\u0207\2\146\7\u0207\3\146\4\u0207\1\146\1\u0207"+
    "\23\146\5\u0207\3\146\3\u0207\14\0\1\u010e\4\0\1\146"+
    "\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146"+
    "\1\0\4\146\1\u0209\16\146\5\0\3\146\17\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\21\146\1\u01a4\1\146\5\0\3\146"+
    "\17\0\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0"+
    "\3\146\1\u010e\3\0\1\146\1\0\4\146\1\u020a\16\146"+
    "\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f\1\0"+
    "\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0\10\146"+
    "\1\u020b\12\146\5\0\3\146\4\0\1\u01a9\3\0\1\u01aa"+
    "\2\0\1\u01ab\5\0\2\u01ab\1\0\1\u01ab\1\0\1\u01ab"+
    "\4\0\1\u01ab\1\u01ad\1\u01ab\13\0\1\u01ae\6\0\1\u01af"+
    "\2\0\1\u01b0\1\u01b1\17\0\1\u01ab\33\0\1\u01ab\107\0"+
    "\3\u01ab\4\0\1\u01ab\1\0\23\u01ab\5\0\1\u01ab\36\0"+
    "\2\u01ab\131\0\1\u020c\103\0\1\u020d\104\0\1\u020e\105\0"+
    "\1\u020d\21\0\1\u01b2\3\0\1\u01b3\2\0\1\u01b4\5\0"+
    "\2\u01b4\1\0\1\u01b4\1\0\1\u01b4\4\0\1\u01b4\1\u01b7"+
    "\1\u01b4\13\0\1\u020f\6\0\1\u0210\2\0\1\u0211\1\u0212"+
    "\17\0\1\u01b4\33\0\1\u01b4\53\0\1\u0213\3\0\1\u0214"+
    "\2\0\1\u0215\3\0\1\u0215\1\0\2\u0215\1\0\1\u0215"+
    "\1\u0216\1\u0215\4\0\1\u0215\1\u0217\1\u0215\5\0\1\u0215"+
    "\5\0\1\u0218\6\0\1\u0219\2\0\1\u021a\1\u021b\17\0"+
    "\1\u0215\37\0\3\u01b4\4\0\1\u01b4\1\0\23\u01b4\5\0"+
    "\1\u01b4\36\0\2\u01b4\52\0\1\u0213\3\0\1\u0214\2\0"+
    "\1\u0215\3\0\1\u0215\1\0\2\u0215\1\0\1\u0215\1\u0216"+
    "\1\u0215\4\0\1\u0215\1\u0217\1\u0215\2\0\3\u01b8\1\u0215"+
    "\5\0\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u021e\1\u021f\7\u01b8"+
    "\10\0\1\u0215\3\0\1\u0213\3\0\1\u0214\2\0\1\u0215"+
    "\3\0\1\u0215\1\0\1\u0215\1\u0220\1\0\1\u0220\1\u0216"+
    "\1\u0215\2\u01d0\2\0\1\u0215\1\u0217\1\u0215\2\0\3\u01b8"+
    "\1\u0215\5\0\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u021e\1\u021f"+
    "\7\u01b8\10\0\1\u0215\3\0\1\u0213\3\0\1\u0214\2\0"+
    "\1\u0215\3\0\1\u0215\1\0\2\u0215\1\0\1\u0215\1\u0216"+
    "\1\u0215\4\0\1\u0215\1\u0217\1\u0215\2\0\3\u01b8\1\u0215"+
    "\5\0\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u0221\1\u021f\7\u01b8"+
    "\10\0\1\u0215\3\0\1\u0213\3\0\1\u0214\2\0\1\u0215"+
    "\3\0\1\u0215\1\0\2\u0215\1\0\1\u0215\1\u0216\1\u0215"+
    "\4\0\1\u0215\1\u0217\1\u0215\2\0\3\u01b8\1\u0215\5\0"+
    "\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u0222\1\u021f\7\u01b8\10\0"+
    "\1\u0215\3\0\1\u0213\3\0\1\u0214\2\0\1\u0215\3\0"+
    "\1\u0215\1\0\2\u0215\1\0\1\u0215\1\u0216\1\u0215\4\0"+
    "\1\u0215\1\u0217\1\u0215\2\0\3\u01b8\1\u0215\5\0\1\u021c"+
    "\6\u01b8\1\u021d\2\u01b8\1\u021e\1\u0223\7\u01b8\10\0\1\u0215"+
    "\3\0\1\u0213\3\0\1\u0214\2\0\1\u0215\3\0\1\u0215"+
    "\1\0\2\u0215\1\0\1\u0215\1\u0216\1\u0215\4\0\1\u0215"+
    "\1\u0217\1\u0215\2\0\3\u01b8\1\u0215\5\0\1\u021c\6\u01b8"+
    "\1\u021d\2\u01b8\1\u021e\1\u021f\1\u01b8\1\u0224\5\u01b8\10\0"+
    "\1\u0215\62\0\1\u0225\103\0\1\u0226\104\0\1\u0227\105\0"+
    "\1\u0226\21\0\1\u01c2\3\0\1\u01c3\2\0\1\u01c4\5\0"+
    "\2\u01c4\1\0\1\u01c4\1\0\1\u01c4\4\0\1\u01c4\1\u01c6"+
    "\1\u01c4\13\0\1\u01c7\6\0\1\u01c8\2\0\1\u01c9\1\u01ca"+
    "\17\0\1\u01c4\33\0\1\u01c4\107\0\3\u01c4\4\0\1\u01c4"+
    "\1\0\23\u01c4\5\0\1\u01c4\36\0\2\u01c4\131\0\1\u0228"+
    "\103\0\1\u0229\104\0\1\u022a\105\0\1\u0229\21\0\1\u01c2"+
    "\3\0\1\u01c3\2\0\1\u01c4\3\0\1\u01c4\1\0\2\u01c4"+
    "\1\0\1\u01c4\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4"+
    "\2\0\3\u012c\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c"+
    "\1\u022b\1\u01ce\7\u012c\10\0\1\u01c4\3\0\1\u01c2\3\0"+
    "\1\u01c3\2\0\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0"+
    "\1\u01c4\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0"+
    "\3\u012c\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u022c"+
    "\1\u01ce\7\u012c\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3"+
    "\2\0\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4"+
    "\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c"+
    "\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u022d"+
    "\7\u012c\10\0\1\u01c4\3\0\1\u01c2\3\0\1\u01c3\2\0"+
    "\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5"+
    "\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c\1\u01c4"+
    "\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u01ce\1\u012c"+
    "\1\u022e\5\u012c\10\0\1\u01c4\26\0\2\u01d0\57\0\1\u01b2"+
    "\3\0\1\u01b3\2\0\1\u01b4\1\u01b5\2\0\1\u01b4\1\0"+
    "\2\u01b4\1\0\1\u01b4\1\u01b6\1\u01b4\2\u01d0\2\0\1\u01b4"+
    "\1\u01b7\1\u01b4\2\0\3\u01b8\1\u01b4\5\0\1\u01ba\6\u01b8"+
    "\1\u01bb\2\u01b8\1\u01bc\1\u01bd\7\u01b8\10\0\1\u01b4\3\0"+
    "\1\u01c2\3\0\1\u01c3\2\0\1\u01c4\3\0\1\u01c4\1\0"+
    "\2\u01c4\1\0\1\u01c4\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6"+
    "\1\u01c4\2\0\3\u012c\1\u01c4\5\0\1\u01cb\2\u012c\1\u01d7"+
    "\3\u012c\1\u01cc\2\u012c\1\u01cd\1\u022d\7\u012c\10\0\1\u01c4"+
    "\3\0\1\u0126\3\0\1\u0127\2\0\1\u0128\1\u0129\2\0"+
    "\1\u0128\1\0\2\u0128\1\0\1\u0128\1\u022f\1\u0128\2\u01d2"+
    "\2\0\1\u0128\1\u012b\1\u0128\2\0\2\u01d3\1\u012c\1\u0128"+
    "\5\0\1\u0230\5\u01d3\1\u012c\1\u0130\2\u012c\1\u0131\1\u0133"+
    "\7\u012c\10\0\1\u0128\3\0\1\u01c2\3\0\1\u01c3\2\0"+
    "\1\u01c4\1\u0129\2\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4"+
    "\1\u01c5\1\u01c4\2\u01d2\2\0\1\u01c4\1\u01c6\1\u01c4\2\0"+
    "\2\u01d3\1\u012c\1\u01c4\5\0\1\u01d4\5\u01d3\1\u012c\1\u01cc"+
    "\2\u012c\1\u01cd\1\u01ce\7\u012c\10\0\1\u01c4\3\0\1\u01c2"+
    "\3\0\1\u01c3\2\0\1\u01c4\1\u0129\2\0\1\u01c4\1\0"+
    "\2\u01c4\1\0\1\u01c4\1\u01c5\1\u01c4\2\u01d2\2\0\1\u01c4"+
    "\1\u01c6\1\u01c4\2\0\2\u01d3\1\u012c\1\u01c4\5\0\1\u01d4"+
    "\5\u01d3\1\u012c\1\u01cc\2\u012c\1\u022b\1\u01ce\7\u012c\10\0"+
    "\1\u01c4\2\0\1\u0128\1\u0231\3\u0128\1\u0232\2\u0128\1\u01c4"+
    "\3\u0128\1\u01c4\1\u0128\2\u01c4\1\u0128\1\u01c4\1\u0233\1\u01c4"+
    "\2\0\2\u0128\1\u01c4\1\u0234\1\u01c4\2\u0128\3\u012c\1\u01c4"+
    "\3\u0128\1\0\1\u0128\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd"+
    "\1\u022d\7\u012c\5\u0128\3\0\1\u01c4\2\u0128\1\0\1\u01c2"+
    "\3\0\1\u01c3\2\0\1\u01c4\3\0\1\u01c4\1\0\2\u01c4"+
    "\1\0\1\u01c4\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4"+
    "\2\0\3\u012c\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c"+
    "\1\u01cd\1\u01ce\1\u012c\1\u022e\1\u012c\1\u01d7\3\u012c\10\0"+
    "\1\u01c4\2\0\1\u0128\1\u0231\3\u0128\1\u0232\2\u0128\1\u01c4"+
    "\3\u0128\1\u01c4\1\u0128\2\u01c4\1\u0128\1\u01c4\1\u0233\1\u01c4"+
    "\2\0\2\u0128\1\u01c4\1\u0234\1\u01c4\2\u0128\3\u012c\1\u01c4"+
    "\3\u0128\1\0\1\u0128\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd"+
    "\1\u01ce\7\u012c\5\u0128\3\0\1\u01c4\2\u0128\60\0\1\u0235"+
    "\103\0\1\u0236\104\0\1\u0237\105\0\1\u0236\21\0\1\u0138"+
    "\3\0\1\u0139\2\0\1\u013a\3\0\1\u013a\1\0\2\u013a"+
    "\1\0\1\u013b\1\u013c\1\u013a\2\202\2\0\1\u013a\1\u013d"+
    "\1\u013a\2\0\3\202\1\u013a\3\0\1\202\1\0\1\u013e"+
    "\2\202\1\u01df\3\202\1\u013f\2\202\1\u0140\1\u01de\7\202"+
    "\5\0\3\202\1\u013a\2\0\1\u013a\1\u0238\3\u013a\1\u0239"+
    "\13\u013a\1\u013b\1\u023a\1\u013a\2\202\3\u013a\1\u023b\3\u013a"+
    "\3\202\4\u013a\1\202\1\u013a\1\u013e\6\202\1\u013f\2\202"+
    "\1\u0140\1\u01de\7\202\5\u013a\3\202\3\u013a\1\0\1\u0138"+
    "\3\0\1\u0139\2\0\1\u013a\3\0\1\u013a\1\0\2\u013a"+
    "\1\0\1\u013b\1\u013c\1\u013a\2\202\2\0\1\u013a\1\u013d"+
    "\1\u013a\2\0\3\202\1\u013a\3\0\1\202\1\0\1\u013e"+
    "\6\202\1\u013f\2\202\1\u0140\1\u0141\1\202\1\u01df\1\202"+
    "\1\u01df\3\202\5\0\3\202\1\u013a\2\0\1\u013a\1\u0238"+
    "\3\u013a\1\u0239\13\u013a\1\u013b\1\u023a\1\u013a\2\202\3\u013a"+
    "\1\u023b\3\u013a\3\202\4\u013a\1\202\1\u013a\1\u013e\6\202"+
    "\1\u013f\2\202\1\u0140\1\u0141\7\202\5\u013a\3\202\3\u013a"+
    "\51\0\1\u01e3\32\0\21\u014d\1\0\2\u014d\2\0\7\u014d"+
    "\3\0\4\u014d\1\0\1\u014d\23\0\5\u014d\3\0\3\u014d"+
    "\65\0\1\u01e3\42\0\2\u01e6\67\0\1\u0156\12\0\2\u01e6"+
    "\7\0\3\u0158\6\0\23\u0158\24\0\1\u0156\12\0\2\u01e7"+
    "\7\0\2\u01e8\1\u0158\6\0\6\u01e8\15\u0158\14\0\1\u01e9"+
    "\3\0\1\u015c\2\0\1\u015d\5\0\2\u015d\1\0\1\u015d"+
    "\1\0\1\u015d\4\0\1\u015d\1\u0160\1\u015d\13\0\1\u0161"+
    "\6\0\1\u0162\2\0\1\u0163\1\u0164\17\0\1\u015d\60\0"+
    "\1\u023c\76\0\1\u01ec\32\0\21\u015d\1\0\2\u015d\2\0"+
    "\7\u015d\3\0\4\u015d\1\0\1\u015d\23\0\5\u015d\3\0"+
    "\3\u015d\65\0\1\u01ec\17\0\1\u01ee\3\0\1\u0166\2\0"+
    "\1\u0167\5\0\2\u0167\1\0\1\u0167\1\0\1\u0167\4\0"+
    "\1\u0167\1\u016a\1\u0167\13\0\1\u016b\6\0\1\u016c\2\0"+
    "\1\u016d\1\u016e\17\0\1\u0167\60\0\1\u023d\76\0\1\u01f1"+
    "\32\0\21\u0167\1\0\2\u0167\2\0\7\u0167\3\0\4\u0167"+
    "\1\0\1\u0167\23\0\5\u0167\3\0\3\u0167\65\0\1\u01f1"+
    "\70\0\1\u023e\50\0\1\u01f5\1\0\1\u01f5\2\0\2\300"+
    "\7\0\3\u017f\6\0\23\u017f\37\0\2\300\124\0\1\271"+
    "\115\0\1\271\34\0\1\u017e\12\0\2\u01f9\7\0\2\u01fa"+
    "\1\u017f\6\0\6\u01fa\15\u017f\41\0\1\u023f\35\0\1\u0240"+
    "\71\0\1\u0241\66\0\3\u0196\4\0\1\u0196\1\0\23\u0196"+
    "\5\0\1\u0196\21\0\1\u0242\4\0\1\146\1\u0243\1\0"+
    "\2\146\7\0\3\146\1\u0242\3\0\1\146\1\0\23\146"+
    "\5\0\3\146\17\0\1\u010e\4\0\1\146\1\u010f\1\0"+
    "\2\146\7\0\3\146\1\u010e\3\0\1\146\1\0\4\146"+
    "\1\u0244\16\146\5\0\3\146\17\0\1\u010e\4\0\1\146"+
    "\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146"+
    "\1\0\15\146\1\u0117\5\146\5\0\3\146\17\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\20\146\1\u0245\2\146\5\0\3\146"+
    "\17\0\1\u0246\4\0\1\146\1\u0247\1\0\2\146\7\0"+
    "\3\146\1\u0246\3\0\1\146\1\0\23\146\5\0\3\146"+
    "\17\0\1\u0248\4\0\1\146\1\u0249\1\0\2\146\7\0"+
    "\3\146\1\u0248\3\0\1\146\1\0\23\146\5\0\3\146"+
    "\17\0\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0"+
    "\3\146\1\u010e\3\0\1\146\1\0\4\146\1\u024a\16\146"+
    "\5\0\3\146\54\0\1\u020d\32\0\21\u01ab\1\0\2\u01ab"+
    "\2\0\7\u01ab\3\0\4\u01ab\1\0\1\u01ab\23\0\5\u01ab"+
    "\3\0\3\u01ab\65\0\1\u020d\76\0\1\u024b\103\0\1\u024c"+
    "\104\0\1\u024d\105\0\1\u024c\21\0\1\u0213\3\0\1\u0214"+
    "\2\0\1\u0215\5\0\2\u0215\1\0\1\u0215\1\0\1\u0215"+
    "\4\0\1\u0215\1\u0217\1\u0215\13\0\1\u0218\6\0\1\u0219"+
    "\2\0\1\u021a\1\u021b\17\0\1\u0215\33\0\1\u0215\107\0"+
    "\3\u0215\4\0\1\u0215\1\0\23\u0215\5\0\1\u0215\36\0"+
    "\2\u0215\131\0\1\u024e\103\0\1\u024f\104\0\1\u0250\105\0"+
    "\1\u024f\21\0\1\u0213\3\0\1\u0214\2\0\1\u0215\3\0"+
    "\1\u0215\1\0\2\u0215\1\0\1\u0215\1\u0216\1\u0215\4\0"+
    "\1\u0215\1\u0217\1\u0215\2\0\3\u01b8\1\u0215\5\0\1\u021c"+
    "\6\u01b8\1\u021d\2\u01b8\1\u0251\1\u021f\7\u01b8\10\0\1\u0215"+
    "\3\0\1\u0213\3\0\1\u0214\2\0\1\u0215\3\0\1\u0215"+
    "\1\0\2\u0215\1\0\1\u0215\1\u0216\1\u0215\4\0\1\u0215"+
    "\1\u0217\1\u0215\2\0\3\u01b8\1\u0215\5\0\1\u021c\6\u01b8"+
    "\1\u021d\2\u01b8\1\u0252\1\u021f\7\u01b8\10\0\1\u0215\3\0"+
    "\1\u0213\3\0\1\u0214\2\0\1\u0215\3\0\1\u0215\1\0"+
    "\2\u0215\1\0\1\u0215\1\u0216\1\u0215\4\0\1\u0215\1\u0217"+
    "\1\u0215\2\0\3\u01b8\1\u0215\5\0\1\u021c\6\u01b8\1\u021d"+
    "\2\u01b8\1\u021e\1\u0253\7\u01b8\10\0\1\u0215\3\0\1\u0213"+
    "\3\0\1\u0214\2\0\1\u0215\3\0\1\u0215\1\0\2\u0215"+
    "\1\0\1\u0215\1\u0216\1\u0215\4\0\1\u0215\1\u0217\1\u0215"+
    "\2\0\3\u01b8\1\u0215\5\0\1\u021c\6\u01b8\1\u021d\2\u01b8"+
    "\1\u021e\1\u021f\1\u01b8\1\u0254\5\u01b8\10\0\1\u0215\3\0"+
    "\1\u0213\3\0\1\u0214\2\0\1\u0215\3\0\1\u0215\1\0"+
    "\2\u0215\1\0\1\u0215\1\u0216\1\u0215\4\0\1\u0215\1\u0217"+
    "\1\u0215\2\0\3\u01b8\1\u0215\5\0\1\u021c\2\u01b8\1\u0224"+
    "\3\u01b8\1\u021d\2\u01b8\1\u021e\1\u0253\7\u01b8\10\0\1\u0215"+
    "\2\0\1\u01b4\1\u0255\3\u01b4\1\u0256\2\u01b4\1\u0215\3\u01b4"+
    "\1\u0215\1\u01b4\2\u0215\1\u01b4\1\u0215\1\u0257\1\u0215\2\0"+
    "\2\u01b4\1\u0215\1\u0258\1\u0215\2\u01b4\3\u01b8\1\u0215\3\u01b4"+
    "\1\0\1\u01b4\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u021e\1\u0253"+
    "\7\u01b8\5\u01b4\3\0\1\u0215\2\u01b4\1\0\1\u0213\3\0"+
    "\1\u0214\2\0\1\u0215\3\0\1\u0215\1\0\2\u0215\1\0"+
    "\1\u0215\1\u0216\1\u0215\4\0\1\u0215\1\u0217\1\u0215\2\0"+
    "\3\u01b8\1\u0215\5\0\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u021e"+
    "\1\u021f\1\u01b8\1\u0254\1\u01b8\1\u0224\3\u01b8\10\0\1\u0215"+
    "\2\0\1\u01b4\1\u0255\3\u01b4\1\u0256\2\u01b4\1\u0215\3\u01b4"+
    "\1\u0215\1\u01b4\2\u0215\1\u01b4\1\u0215\1\u0257\1\u0215\2\0"+
    "\2\u01b4\1\u0215\1\u0258\1\u0215\2\u01b4\3\u01b8\1\u0215\3\u01b4"+
    "\1\0\1\u01b4\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u021e\1\u021f"+
    "\7\u01b8\5\u01b4\3\0\1\u0215\2\u01b4\51\0\1\u0226\32\0"+
    "\21\u0128\1\0\2\u0128\2\0\7\u0128\3\0\4\u0128\1\0"+
    "\1\u0128\23\0\5\u0128\3\0\3\u0128\65\0\1\u0226\67\0"+
    "\1\u0229\32\0\21\u01c4\1\0\2\u01c4\2\0\7\u01c4\3\0"+
    "\4\u01c4\1\0\1\u01c4\23\0\5\u01c4\3\0\3\u01c4\65\0"+
    "\1\u0229\17\0\1\u01c2\3\0\1\u01c3\2\0\1\u01c4\3\0"+
    "\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5\1\u01c4\4\0"+
    "\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c\1\u01c4\5\0\1\u01cb"+
    "\2\u012c\1\u022e\3\u012c\1\u01cc\2\u012c\1\u01cd\1\u022d\7\u012c"+
    "\10\0\1\u01c4\2\0\1\u01c4\1\u0259\3\u01c4\1\u025a\14\u01c4"+
    "\1\u025b\1\u01c4\2\0\3\u01c4\1\u025c\3\u01c4\3\u012c\4\u01c4"+
    "\1\0\1\u01c4\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u022d"+
    "\7\u012c\5\u01c4\3\0\3\u01c4\1\0\1\u01c2\3\0\1\u01c3"+
    "\2\0\1\u01c4\3\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4"+
    "\1\u01c5\1\u01c4\4\0\1\u01c4\1\u01c6\1\u01c4\2\0\3\u012c"+
    "\1\u01c4\5\0\1\u01cb\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u01ce"+
    "\1\u012c\1\u022e\1\u012c\1\u022e\3\u012c\10\0\1\u01c4\2\0"+
    "\1\u01c4\1\u0259\3\u01c4\1\u025a\14\u01c4\1\u025b\1\u01c4\2\0"+
    "\3\u01c4\1\u025c\3\u01c4\3\u012c\4\u01c4\1\0\1\u01c4\1\u01cb"+
    "\6\u012c\1\u01cc\2\u012c\1\u01cd\1\u01ce\7\u012c\5\u01c4\3\0"+
    "\3\u01c4\35\0\3\u0128\4\0\1\u0128\1\0\23\u0128\5\0"+
    "\1\u0128\6\0\1\u01c2\3\0\1\u01c3\2\0\1\u01c4\1\u0129"+
    "\2\0\1\u01c4\1\0\2\u01c4\1\0\1\u01c4\1\u01c5\1\u01c4"+
    "\2\u01d2\2\0\1\u01c4\1\u01c6\1\u01c4\2\0\2\u01d3\1\u012c"+
    "\1\u01c4\5\0\1\u01d4\5\u01d3\1\u012c\1\u01cc\2\u012c\1\u01d1"+
    "\1\u01ce\7\u012c\10\0\1\u01c4\53\0\1\u0236\32\0\21\u013a"+
    "\1\0\2\u013a\2\0\7\u013a\3\0\4\u013a\1\0\1\u013a"+
    "\23\0\5\u013a\3\0\3\u013a\65\0\1\u0236\102\0\1\u025d"+
    "\103\0\1\u025e\42\0\1\u025f\106\0\1\u0260\112\0\3\u0242"+
    "\4\0\1\u0242\1\0\23\u0242\5\0\1\u0242\21\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\22\146\1\u0261\5\0\3\146\17\0"+
    "\1\u010e\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146"+
    "\1\u010e\3\0\1\146\1\0\3\146\1\u0262\17\146\5\0"+
    "\3\146\40\0\3\u0246\4\0\1\u0246\1\0\23\u0246\5\0"+
    "\1\u0246\42\0\3\u0263\4\0\1\u0263\1\0\23\u0263\5\0"+
    "\1\u0263\5\0\21\u0264\1\146\1\u0265\1\u0264\2\146\7\u0264"+
    "\3\146\4\u0264\1\146\1\u0264\23\146\5\u0264\3\146\3\u0264"+
    "\51\0\1\u024c\32\0\21\u01b4\1\0\2\u01b4\2\0\7\u01b4"+
    "\3\0\4\u01b4\1\0\1\u01b4\23\0\5\u01b4\3\0\3\u01b4"+
    "\65\0\1\u024c\67\0\1\u024f\32\0\21\u0215\1\0\2\u0215"+
    "\2\0\7\u0215\3\0\4\u0215\1\0\1\u0215\23\0\5\u0215"+
    "\3\0\3\u0215\65\0\1\u024f\17\0\1\u0213\3\0\1\u0214"+
    "\2\0\1\u0215\3\0\1\u0215\1\0\2\u0215\1\0\1\u0215"+
    "\1\u0216\1\u0215\4\0\1\u0215\1\u0217\1\u0215\2\0\3\u01b8"+
    "\1\u0215\5\0\1\u021c\2\u01b8\1\u0254\3\u01b8\1\u021d\2\u01b8"+
    "\1\u021e\1\u0253\7\u01b8\10\0\1\u0215\2\0\1\u0215\1\u0266"+
    "\3\u0215\1\u0267\14\u0215\1\u0268\1\u0215\2\0\3\u0215\1\u0269"+
    "\3\u0215\3\u01b8\4\u0215\1\0\1\u0215\1\u021c\6\u01b8\1\u021d"+
    "\2\u01b8\1\u021e\1\u0253\7\u01b8\5\u0215\3\0\3\u0215\1\0"+
    "\1\u0213\3\0\1\u0214\2\0\1\u0215\3\0\1\u0215\1\0"+
    "\2\u0215\1\0\1\u0215\1\u0216\1\u0215\4\0\1\u0215\1\u0217"+
    "\1\u0215\2\0\3\u01b8\1\u0215\5\0\1\u021c\6\u01b8\1\u021d"+
    "\2\u01b8\1\u021e\1\u021f\1\u01b8\1\u0254\1\u01b8\1\u0254\3\u01b8"+
    "\10\0\1\u0215\2\0\1\u0215\1\u0266\3\u0215\1\u0267\14\u0215"+
    "\1\u0268\1\u0215\2\0\3\u0215\1\u0269\3\u0215\3\u01b8\4\u0215"+
    "\1\0\1\u0215\1\u021c\6\u01b8\1\u021d\2\u01b8\1\u021e\1\u021f"+
    "\7\u01b8\5\u0215\3\0\3\u0215\52\0\1\u026a\103\0\1\u026b"+
    "\54\0\1\u026c\103\0\1\u026d\74\0\1\u010e\4\0\1\146"+
    "\1\u010f\1\0\2\146\7\0\3\146\1\u010e\3\0\1\146"+
    "\1\0\17\146\1\u026e\3\146\5\0\3\146\17\0\1\u010e"+
    "\4\0\1\146\1\u010f\1\0\2\146\7\0\3\146\1\u010e"+
    "\3\0\1\146\1\0\4\146\1\u01a4\16\146\5\0\3\146"+
    "\10\0\1\u026f\1\0\6\u026f\1\0\14\u026f\1\0\6\u026f"+
    "\3\0\1\u026f\1\0\24\u026f\35\0\1\u0270\65\0\1\u0271"+
    "\1\0\6\u0271\1\0\14\u0271\1\0\6\u0271\3\0\1\u0271"+
    "\1\0\24\u0271\12\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[30056];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\41\0\3\1\3\11\6\1\2\11\3\1\1\11\1\1"+
    "\1\11\3\1\1\11\2\1\2\11\7\1\4\11\13\1"+
    "\2\11\2\1\2\11\1\1\1\11\2\1\2\11\7\1"+
    "\1\11\11\1\1\11\5\1\1\11\5\1\2\11\4\1"+
    "\1\11\5\1\3\11\3\1\2\11\5\1\1\11\4\1"+
    "\1\11\1\1\1\11\1\1\10\11\2\1\1\11\2\1"+
    "\4\11\4\1\3\0\3\1\1\0\1\1\5\0\2\1"+
    "\1\0\1\1\6\0\1\1\3\11\1\1\1\11\2\1"+
    "\1\11\1\0\1\11\1\1\1\11\1\1\2\11\2\1"+
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\4\0\2\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\1\3\0\4\1\1\0\1\11\1\0"+
    "\2\1\1\11\1\0\3\1\1\11\1\0\14\1\1\11"+
    "\1\0\1\1\1\0\4\11\1\1\1\11\2\0\1\11"+
    "\1\1\2\0\10\1\4\11\2\0\1\11\1\1\2\0"+
    "\4\1\1\11\10\1\2\0\2\11\6\0\1\1\1\11"+
    "\1\0\3\1\2\0\2\11\10\0\2\11\6\0\1\11"+
    "\1\0\1\11\1\0\1\11\7\0\1\11\1\1\1\0"+
    "\1\11\2\1\2\0\5\11\2\1\6\0\2\1\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\3\1\1\11\4\1"+
    "\1\11\10\1\2\0\1\11\10\0\1\11\1\1\2\0"+
    "\6\1\6\0\1\11\6\0\15\1\4\0\6\1\4\0"+
    "\3\1\13\0\1\1\5\0\2\1\2\0\2\11\1\0"+
    "\2\1\1\11\3\1\1\11\4\1\11\0\1\11\6\0"+
    "\11\1\6\0\4\1\1\0\5\1\3\0\4\1\2\0"+
    "\1\11\2\0\2\11\1\0\2\1\1\11\1\0\1\11"+
    "\1\0\1\1\6\0\14\1\4\0\2\1\2\11\5\1"+
    "\2\11\1\1\1\0\1\1\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    ArrayList<Integer> stack = new ArrayList<>();
    boolean newline = true;
    boolean was_word = false;
    boolean eofHandled = false;

    void end_token() {
        eofHandled = false;
        CharSequence str = yytext();
        char last = str.charAt(str.length() - 1);
        was_word = Character.isAlphabetic(last) || Character.isDigit(last); // TODO Handle scripts
        newline = false;
        for (int i = str.length() - 1;  i >= 0; i--) {
            newline = "\n\r\u2028\u2029\u0085\u000B\u000C".contains( ""  + str.charAt(i));
            if(newline) break;
            if (!Character.isWhitespace(str.charAt(i))) break;
        }
    }

    void push(int newState) {
        stack.add(yystate());
        yybegin(newState);
    }

    int pop() {
        int state = stack.remove(stack.size() - 1);
        yybegin(state);
        return state;
    }

    IElementType onEof(IElementType token) {
        if (eofHandled) {
            eofHandled = false;
            return null;
        }
        eofHandled = true;
        clear();
        return token;
    }

    void clear() {
        newline = false;
        was_word = false;
        stack.clear();
    }

    IElementType possiblyKeyword(CharSequence text) {
        return switch(text.toString()) {
            case "none" -> NONE;
            case "auto" -> AUTO;
            case "true" -> BOOL;
            case "false" -> BOOL;
            case "not" -> NOT;
            case "and" -> AND;
            case "or" -> OR;
            case "let" -> LET;
            case "set" -> SET;
            case "show" -> SHOW;
            case "context" -> CONTEXT;
            case "if" -> IF;
            case "else" -> ELSE;
            case "for" -> FOR;
            case "in" -> IN;
            case "while" -> WHILE;
            case "break" -> BREAK;
            case "continue" -> CONTINUE;
            case "return" -> RETURN;
            case "import" -> IMPORT;
            case "include" -> INCLUDE;
            case "as" -> AS;
            default -> IDENT;
        };
    }

    int whiteToken() {
        end_token();
        String token = yytext().toString().replace("\r\n", "x");
        int newlines = 0;
        for (char c : token.toCharArray()) {
         if ("\n\r\u2028\u2029\u0085\u000B\u000C".contains( ""  + c)) newlines++;
        }
        newline = newlines > 0;
        was_word = false;
        return newlines;
    }

    int popMode(int mode) {
        if (yystate() == mode) {
            return pop();
        }
        while(!stack.isEmpty()) {
            if(pop() == mode) {
                break;
            }
        }
        if(!stack.isEmpty())pop();
        return yystate();
    }

    int were_backticks = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypstLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case RAW: {
              return onEof(UNCLOSED_RAW);
            }  // fall though
            case 626: break;
            case BLOCK_COMMENT_MODE: {
              return onEof(BLOCK_COMMENT);
            }  // fall though
            case 627: break;
            case BLOCKY_RAW: {
              return onEof(UNCLOSED_RAW);
            }  // fall though
            case 628: break;
            case UNICODE_ESCAPE: {
              return onEof(UNCLOSED_UNICODE_ESCAPE);
            }  // fall though
            case 629: break;
            case LINK_MODE: {
              return onEof(LINK);
            }  // fall though
            case 630: break;
            case LINK_PAR: {
              return onEof(UNBALANCED_LINK);
            }  // fall though
            case 631: break;
            case LINK_SQ: {
              return onEof(UNBALANCED_LINK);
            }  // fall though
            case 632: break;
            case LINK_CURLY: {
              return onEof(UNBALANCED_LINK);
            }  // fall though
            case 633: break;
            case LINK_ANGLE: {
              return onEof(UNBALANCED_LINK);
            }  // fall though
            case 634: break;
            case LABEL_MODE: {
              return onEof(UNCLOSED_LABEL);
            }  // fall though
            case 635: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { end_token(); return TEXT;
            }
          // fall through
          case 175: break;
          case 2:
            { whiteToken(); return SPACE;
            }
          // fall through
          case 176: break;
          case 3:
            { end_token(); return SMART_QUOTE;
            }
          // fall through
          case 177: break;
          case 4:
            { end_token(); push(EMBEDDED_CODE_EXPR); return HASH;
            }
          // fall through
          case 178: break;
          case 5:
            { end_token(); push(MATH); return DOLLAR;
            }
          // fall through
          case 179: break;
          case 6:
            { IElementType token = was_word ? TEXT : STAR; end_token(); return token;
            }
          // fall through
          case 180: break;
          case 7:
            { end_token(); return SEMICOLON; /* In support for embedded exprs */
            }
          // fall through
          case 181: break;
          case 8:
            { newline=false; was_word = false; return REF_MARKER;
            }
          // fall through
          case 182: break;
          case 9:
            { push(MARKUP); end_token(); return TEXT;
            }
          // fall through
          case 183: break;
          case 10:
            { return TEXT;
            }
          // fall through
          case 184: break;
          case 11:
            { IElementType token = was_word ? TEXT : UNDERSCORE; end_token(); return token;
            }
          // fall through
          case 185: break;
          case 12:
            { were_backticks = yytext().length();
                                                                            if(were_backticks >= 3) {
                                                                                push(BLOCKY_RAW);
                                                                                return RAW_DELIM;
                                                                            } else {
                                                                                push(RAW);
                                                                                return RAW_DELIM;
                                                                            }
            }
          // fall through
          case 186: break;
          case 13:
            { newline=false; was_word=false; return SHORTHAND;
            }
          // fall through
          case 187: break;
          case 14:
            { int now = pop();
                                                                            end_token();
                                                                            if (now == AFTER_BRANCH) {
                                                                                pop(); pop();
                                                                                return RIGHT_BRACKET;
                                                                            }
                                                                            if (now == EMBEDDED_CODE_EXPR || now == NON_ATOMIC_EXPR || now == AFTER_REF) pop();
                                                                            return now == MARKUP || now == YYINITIAL || now == TERM ? TEXT : RIGHT_BRACKET;
            }
          // fall through
          case 188: break;
          case 15:
            { return RAW_CODE;
            }
          // fall through
          case 189: break;
          case 16:
            { newline=false; was_word=false;
                                                                            if (pop() == EMBEDDED_CODE_EXPR) pop();
                                                                            return RAW_DELIM;
            }
          // fall through
          case 190: break;
          case 17:
            { 
            }
          // fall through
          case 191: break;
          case 18:
            { return BLOCKY_RAW_CODE;
            }
          // fall through
          case 192: break;
          case 19:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 193: break;
          case 20:
            { whiteToken(); return CODE_SPACE;
            }
          // fall through
          case 194: break;
          case 21:
            { push(EMBEDDED_CODE_EXPR); return HASH;
            }
          // fall through
          case 195: break;
          case 22:
            { end_token(); if(pop() == EMBEDDED_CODE_EXPR) pop(); return DOLLAR;
            }
          // fall through
          case 196: break;
          case 23:
            { return MATH_ALIGN_POINT;
            }
          // fall through
          case 197: break;
          case 24:
            { return PRIME;
            }
          // fall through
          case 198: break;
          case 25:
            { return MATH_SHORTHAND;
            }
          // fall through
          case 199: break;
          case 26:
            { return SLASH;
            }
          // fall through
          case 200: break;
          case 27:
            { return MATH_IDENT;
            }
          // fall through
          case 201: break;
          case 28:
            { return HAT;
            }
          // fall through
          case 202: break;
          case 29:
            { return UNDERSCORE;
            }
          // fall through
          case 203: break;
          case 30:
            { return ROOT;
            }
          // fall through
          case 204: break;
          case 31:
            { whiteToken(); return CODE_NEW_LINE_SPACE;
            }
          // fall through
          case 205: break;
          case 32:
            { push(MATH); return DOLLAR;
            }
          // fall through
          case 206: break;
          case 33:
            { push(PARENTHESIZED); return LEFT_PAREN;
            }
          // fall through
          case 207: break;
          case 34:
            { end_token(); return DOT;
            }
          // fall through
          case 208: break;
          case 35:
            { end_token(); pop(); return INT;
            }
          // fall through
          case 209: break;
          case 36:
            { end_token(); pop(); return IDENT;
            }
          // fall through
          case 210: break;
          case 37:
            { end_token(); push(MARKUP); return LEFT_BRACKET;
            }
          // fall through
          case 211: break;
          case 38:
            { push(CODE_BLOCK); return LEFT_BRACE;
            }
          // fall through
          case 212: break;
          case 39:
            { int newlines = whiteToken();
                                                                            if (newlines >= 1) {
                                                                                int was = pop();
                                                                                if (was == FOR_EXPR_AFTER_IN || was == IF_ELSE_EXPR || was == WHILE_EXPR) pop();
                                                                                pop();
                                                                            }
                                                                            return newlines >= 1 ? CODE_NEW_LINE_SPACE : CODE_SPACE;
            }
          // fall through
          case 213: break;
          case 40:
            { return STAR;
            }
          // fall through
          case 214: break;
          case 41:
            { return PLUS;
            }
          // fall through
          case 215: break;
          case 42:
            { return COMMA;
            }
          // fall through
          case 216: break;
          case 43:
            { return MINUS;
            }
          // fall through
          case 217: break;
          case 44:
            { return DOT;
            }
          // fall through
          case 218: break;
          case 45:
            { int was = pop(); /*Agh, some checks? pop(); */ return INT;
            }
          // fall through
          case 219: break;
          case 46:
            { return COLON;
            }
          // fall through
          case 220: break;
          case 47:
            { return SEMICOLON;
            }
          // fall through
          case 221: break;
          case 48:
            { return LT;
            }
          // fall through
          case 222: break;
          case 49:
            { return EQ;
            }
          // fall through
          case 223: break;
          case 50:
            { return GT;
            }
          // fall through
          case 224: break;
          case 51:
            { pop(); return possiblyKeyword(yytext());
            }
          // fall through
          case 225: break;
          case 52:
            { push(MARKUP); return LEFT_BRACKET;
            }
          // fall through
          case 226: break;
          case 53:
            { pop(); push(AFTER_BRANCH); push(MARKUP); return LEFT_BRACKET;
            }
          // fall through
          case 227: break;
          case 54:
            { pop(); push(AFTER_BRANCH); push(CODE_BLOCK); return LEFT_BRACE;
            }
          // fall through
          case 228: break;
          case 55:
            { pop(); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 229: break;
          case 56:
            { int newlines = whiteToken();
                                                                            if (newlines >= 1) {
                                                                                if (pop() == EMBEDDED_CODE_EXPR) pop();
                                                                            }
                                                                            return newlines >= 2 ? PARBREAK : newlines == 1? NEW_LINE : CODE_SPACE;
            }
          // fall through
          case 230: break;
          case 57:
            { pop(); push(MARKUP); return LEFT_BRACKET;
            }
          // fall through
          case 231: break;
          case 58:
            { pop(); push(CODE_BLOCK); return LEFT_BRACE;
            }
          // fall through
          case 232: break;
          case 59:
            { int was = popMode(PARENTHESIZED);
                                                                            if(was == EMBEDDED_CODE_EXPR || was == NON_ATOMIC_EXPR) pop();
                                                                            return RIGHT_PAREN;
            }
          // fall through
          case 233: break;
          case 60:
            { return INT;
            }
          // fall through
          case 234: break;
          case 61:
            { pop(); return SEMICOLON;
            }
          // fall through
          case 235: break;
          case 62:
            { return possiblyKeyword(yytext());
            }
          // fall through
          case 236: break;
          case 63:
            { int was = popMode(MARKUP);
                                                                             if(was == EMBEDDED_CODE_EXPR || was == NON_ATOMIC_EXPR) pop();
                                                                             else if (was == AFTER_BRANCH) { pop(); pop(); }
                                                                             return RIGHT_BRACKET;
            }
          // fall through
          case 237: break;
          case 64:
            { int was = popMode(CODE_BLOCK);
                                                                            if(was == EMBEDDED_CODE_EXPR || was == NON_ATOMIC_EXPR) pop();
                                                                            else if ( was == AFTER_BRANCH) {pop(); pop();}
                                                                            return RIGHT_BRACE;
            }
          // fall through
          case 238: break;
          case 65:
            { pop(); end_token(); return UNCLOSED_UNICODE_ESCAPE;
            }
          // fall through
          case 239: break;
          case 66:
            { pop(); end_token(); return ESCAPE;
            }
          // fall through
          case 240: break;
          case 67:
            { push(LINK_PAR);
            }
          // fall through
          case 241: break;
          case 68:
            { newline=false; was_word = false; pop(); return UNREACHABLE;
            }
          // fall through
          case 242: break;
          case 69:
            { push(LINK_ANGLE);
            }
          // fall through
          case 243: break;
          case 70:
            { push(LINK_SQ);
            }
          // fall through
          case 244: break;
          case 71:
            { push(LINK_CURLY);
            }
          // fall through
          case 245: break;
          case 72:
            { newline=false; was_word = false; pop(); return UNBALANCED_LINK;
            }
          // fall through
          case 246: break;
          case 73:
            { pop();
            }
          // fall through
          case 247: break;
          case 74:
            { pop(); return UNCLOSED_LABEL;
            }
          // fall through
          case 248: break;
          case 75:
            { if(pop() == EMBEDDED_CODE_EXPR) pop(); end_token(); return LABEL;
            }
          // fall through
          case 249: break;
          case 76:
            { throw new AssertionError();
            }
          // fall through
          case 250: break;
          case 77:
            { end_token(); pop(); return COLON;
            }
          // fall through
          case 251: break;
          case 78:
            { end_token(); push(MARKUP); return TEXT;
            }
          // fall through
          case 252: break;
          case 79:
            { pop(); yypushback(1);
            }
          // fall through
          case 253: break;
          case 80:
            { pop(); push(FOR_EXPR_AFTER_PATTERN); push(PARENTHESIZED); return LEFT_PAREN;
            }
          // fall through
          case 254: break;
          case 81:
            { pop(); push(FOR_EXPR_AFTER_PATTERN); return possiblyKeyword(yytext());
            }
          // fall through
          case 255: break;
          case 82:
            { IElementType it = possiblyKeyword(yytext());
                                                                             pop();
                                                                             if (it == IN) {
                                                                                 push(FOR_EXPR_AFTER_IN);
                                                                                 push(NON_ATOMIC_EXPR);
                                                                             }
                                                                             return it;
            }
          // fall through
          case 256: break;
          case 83:
            { whiteToken(); return PARBREAK;
            }
          // fall through
          case 257: break;
          case 84:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { end_token(); return STAR;
            }
          // fall through
          case 258: break;
          case 85:
            { end_token(); return UNEXPECTED_BLOCK_COMMENT;
            }
          // fall through
          case 259: break;
          case 86:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { IElementType token = newline ? ENUM_MARKER : TEXT; end_token(); return token;
            }
          // fall through
          case 260: break;
          case 87:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { IElementType token = newline ? LIST_MARKER : TEXT; end_token(); return token;
            }
          // fall through
          case 261: break;
          case 88:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { newline=false; was_word=false; return SHORTHAND;
            }
          // fall through
          case 262: break;
          case 89:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { IElementType token = newline ? TERM_MARKER : TEXT;
                                                                            if(newline) push(TERM);
                                                                            end_token();
                                                                            return token;
            }
          // fall through
          case 263: break;
          case 90:
            { push(BLOCK_COMMENT_MODE);
            }
          // fall through
          case 264: break;
          case 91:
            { end_token(); return LINE_COMMENT;
            }
          // fall through
          case 265: break;
          case 92:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { push(LABEL_MODE);
            }
          // fall through
          case 266: break;
          case 93:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { IElementType token = newline ? HEADING_MARKER : TEXT; end_token(); return token;
            }
          // fall through
          case 267: break;
          case 94:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { newline=false; was_word = false; push(AFTER_REF); return REF_MARKER;
            }
          // fall through
          case 268: break;
          case 95:
            { end_token(); return ESCAPE;
            }
          // fall through
          case 269: break;
          case 96:
            { end_token(); return LINEBREAK;
            }
          // fall through
          case 270: break;
          case 97:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { end_token(); return UNDERSCORE;
            }
          // fall through
          case 271: break;
          case 98:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { push(RAW); return RAW_DELIM;
            }
          // fall through
          case 272: break;
          case 99:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { int now = pop();
                                                                            end_token();
                                                                            if (now == EMBEDDED_CODE_EXPR || now == AFTER_REF) pop();
                                                                            // Don't
                                                                            return now == MARKUP || now == YYINITIAL || now == TERM ? TEXT : RIGHT_BRACKET;
            }
          // fall through
          case 273: break;
          case 100:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { int now = pop();
                                                                            end_token();
                                                                            // Don't
                                                                            if (now == AFTER_REF) pop();
                                                                            return now == MARKUP || now == YYINITIAL || now == TERM ? TEXT : RIGHT_BRACKET;
            }
          // fall through
          case 274: break;
          case 101:
            { if (pop() != BLOCK_COMMENT_MODE) return BLOCK_COMMENT;
            }
          // fall through
          case 275: break;
          case 102:
            { return STRING;
            }
          // fall through
          case 276: break;
          case 103:
            { end_token(); pop(); return STRING;
            }
          // fall through
          case 277: break;
          case 104:
            { end_token(); pop(); return FLOAT;
            }
          // fall through
          case 278: break;
          case 105:
            { end_token(); pop(); return NUMERIC;
            }
          // fall through
          case 279: break;
          case 106:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return INT;
            }
          // fall through
          case 280: break;
          case 107:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { end_token(); return IDENT;
            }
          // fall through
          case 281: break;
          case 108:
            { return EXCL_EQ;
            }
          // fall through
          case 282: break;
          case 109:
            { int was = pop(); /*Agh, some checks? pop(); */ return STRING;
            }
          // fall through
          case 283: break;
          case 110:
            { return STAR_EQ;
            }
          // fall through
          case 284: break;
          case 111:
            { return PLUS_EQ;
            }
          // fall through
          case 285: break;
          case 112:
            { return HYPH_EQ;
            }
          // fall through
          case 286: break;
          case 113:
            { return DOTS;
            }
          // fall through
          case 287: break;
          case 114:
            { int was = pop(); /*Agh, some checks? pop(); */ return FLOAT;
            }
          // fall through
          case 288: break;
          case 115:
            { return SLASH_EQ;
            }
          // fall through
          case 289: break;
          case 116:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 30;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { /* Just continue parsing non atomic */ return INT;
            }
          // fall through
          case 290: break;
          case 117:
            { int was = pop(); /*Agh, some checks? pop(); */ return NUMERIC;
            }
          // fall through
          case 291: break;
          case 118:
            { return LT_EQ;
            }
          // fall through
          case 292: break;
          case 119:
            { return EQ_EQ;
            }
          // fall through
          case 293: break;
          case 120:
            { return ARROW;
            }
          // fall through
          case 294: break;
          case 121:
            { return GT_EQ;
            }
          // fall through
          case 295: break;
          case 122:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 32;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return possiblyKeyword(yytext());
            }
          // fall through
          case 296: break;
          case 123:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return UNDERSCORE;
            }
          // fall through
          case 297: break;
          case 124:
            { return IN;
            }
          // fall through
          case 298: break;
          case 125:
            { return OR;
            }
          // fall through
          case 299: break;
          case 126:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { if(popMode(PARENTHESIZED) == EMBEDDED_CODE_EXPR) pop(); return RIGHT_PAREN;
            }
          // fall through
          case 300: break;
          case 127:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { popMode(PARENTHESIZED); return RIGHT_PAREN;
            }
          // fall through
          case 301: break;
          case 128:
            { return FLOAT;
            }
          // fall through
          case 302: break;
          case 129:
            { return NUMERIC;
            }
          // fall through
          case 303: break;
          case 130:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { if(popMode(MARKUP) == EMBEDDED_CODE_EXPR) pop(); return RIGHT_BRACKET;
            }
          // fall through
          case 304: break;
          case 131:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { popMode(MARKUP); return RIGHT_BRACKET;
            }
          // fall through
          case 305: break;
          case 132:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { if(popMode(CODE_BLOCK) == EMBEDDED_CODE_EXPR) pop(); return RIGHT_BRACE;
            }
          // fall through
          case 306: break;
          case 133:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { popMode(CODE_BLOCK); return RIGHT_BRACE;
            }
          // fall through
          case 307: break;
          case 134:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { newline=false; was_word = false; pop(); return LINK;
            }
          // fall through
          case 308: break;
          case 135:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return LABEL;
            }
          // fall through
          case 309: break;
          case 136:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { pop(); push(FOR_EXPR_AFTER_PATTERN); return UNDERSCORE;
            }
          // fall through
          case 310: break;
          case 137:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { IElementType token = newline ? ENUM_MARKER : TEXT; end_token(); return token;
            }
          // fall through
          case 311: break;
          case 138:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { IElementType token = newline ? LIST_MARKER : TEXT; end_token(); return token;
            }
          // fall through
          case 312: break;
          case 139:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { IElementType token = newline ? TERM_MARKER : TEXT;
                                                                            if(newline) push(TERM);
                                                                            end_token();
                                                                            return token;
            }
          // fall through
          case 313: break;
          case 140:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { IElementType token = newline ? HEADING_MARKER : TEXT; end_token(); return token;
            }
          // fall through
          case 314: break;
          case 141:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { newline=false; was_word = false; push(AFTER_REF); return REF_MARKER;
            }
          // fall through
          case 315: break;
          case 142:
            { push(UNICODE_ESCAPE);
            }
          // fall through
          case 316: break;
          case 143:
            { int found = yytext().length();
                                                                             if (found < were_backticks) {
                                                                                 return BLOCKY_RAW_CODE;
                                                                             } else {
                                                                                 yypushback(found - were_backticks);
                                                                                 pop();
                                                                                 return RAW_DELIM;
                                                                             }
            }
          // fall through
          case 317: break;
          case 144:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return FLOAT;
            }
          // fall through
          case 318: break;
          case 145:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return NUMERIC;
            }
          // fall through
          case 319: break;
          case 146:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return INT;
            }
          // fall through
          case 320: break;
          case 147:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { end_token(); return IDENT;
            }
          // fall through
          case 321: break;
          case 148:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { push(IF_ELSE_EXPR); push(NON_ATOMIC_EXPR); return IF;
            }
          // fall through
          case 322: break;
          case 149:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 31;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { /* Just continue parsing non atomic */ return STRING;
            }
          // fall through
          case 323: break;
          case 150:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 28;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { /* Just continue parsing non atomic */ return FLOAT;
            }
          // fall through
          case 324: break;
          case 151:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 29;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { /* Just continue parsing non atomic */ return NUMERIC;
            }
          // fall through
          case 325: break;
          case 152:
            { return AND;
            }
          // fall through
          case 326: break;
          case 153:
            { return NOT;
            }
          // fall through
          case 327: break;
          case 154:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return FLOAT;
            }
          // fall through
          case 328: break;
          case 155:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return NUMERIC;
            }
          // fall through
          case 329: break;
          case 156:
            { end_token(); pop(); return AUTO;
            }
          // fall through
          case 330: break;
          case 157:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { push(FOR_EXPR); return FOR;
            }
          // fall through
          case 331: break;
          case 158:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { pop(); push(EMBEDDED_STATEMENT); return possiblyKeyword(yytext());
            }
          // fall through
          case 332: break;
          case 159:
            { end_token(); pop(); return NONE;
            }
          // fall through
          case 333: break;
          case 160:
            { end_token(); pop(); return BOOL;
            }
          // fall through
          case 334: break;
          case 161:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 26;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { /* Just continue parsing non atomic */ return NUMERIC;
            }
          // fall through
          case 335: break;
          case 162:
            { pop(); /*We're now in embedded code expr, so just continue parsing {}, [] or if-else*/ return ELSE;
            }
          // fall through
          case 336: break;
          case 163:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { int now = pop();
                                                                            if (now == AFTER_REF) pop();

                                                                            return now == MARKUP || now == YYINITIAL || now == TERM ? TEXT : RIGHT_BRACKET;
            }
          // fall through
          case 337: break;
          case 164:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return AUTO;
            }
          // fall through
          case 338: break;
          case 165:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return NONE;
            }
          // fall through
          case 339: break;
          case 166:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return BOOL;
            }
          // fall through
          case 340: break;
          case 167:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return BOOL;
            }
          // fall through
          case 341: break;
          case 168:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { push(WHILE_EXPR); push(NON_ATOMIC_EXPR); return WHILE;
            }
          // fall through
          case 342: break;
          case 169:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { int was = popMode(MARKUP);
                                                                            if(was == EMBEDDED_CODE_EXPR || was == NON_ATOMIC_EXPR) pop();
                                                                            return RIGHT_BRACKET;
            }
          // fall through
          case 343: break;
          case 170:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { int was = popMode(CODE_BLOCK);
                                                                            if(was == EMBEDDED_CODE_EXPR || was == NON_ATOMIC_EXPR) pop();
                                                                            return RIGHT_BRACE;
            }
          // fall through
          case 344: break;
          case 171:
            { return EMPTY_LINK;
            }
          // fall through
          case 345: break;
          case 172:
            { return CONTEXT;
            }
          // fall through
          case 346: break;
          case 173:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { push(LINK_MODE);
            }
          // fall through
          case 347: break;
          case 174:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 8);
            { push(LINK_MODE);
            }
          // fall through
          case 348: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
