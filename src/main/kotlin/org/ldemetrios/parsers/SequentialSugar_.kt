  @file:Suppress("PackageDirectoryMismatch", "unused", "NAME_SHADOWING", "KotlinRedundantDiagnosticSuppress", "UNUSED_PARAMETER", "UNUSED_PARAMETER", "ObjectPropertyName", "NonAsciiCharacters", "RedundantLambdaArrow", "TrailingComma")  

 package org.ldemetrios.parsers

import org.ldemetrios.utilities.*

@JvmName("times_x_s")
 operator fun <Ch, A> NonSequentialParser<Ch, A>.times(next: SkipParser<Ch, *>) = Sequential<Ch, A, Monad<A>>(listOf(this, next), ::Monad)
 @JvmName("times_x_c")
 operator fun <Ch, A> NonSequentialParser<Ch, A>.times(next: CutParserT<Ch>) = Sequential<Ch, A, Monad<A>>(listOf(this, next), ::Monad)
 @JvmName("times_x_x")
 operator fun <Ch, Z, A: Z, B: Z> NonSequentialParser<Ch, A>.times(next: MeaningfulParser<Ch, B>) = Sequential<Ch, Z, Dyad<Z, A, B>>(listOf(this, next), ::Dyad)
 
 @JvmName("times_s_s")
 operator fun <Ch> SkipParser<Ch, *>.times(next: SkipParser<Ch, *>) = Sequential<Ch, Nothing, Nullad<Nothing>>(listOf(this, next), ::Nullad)
 @JvmName("times_s_c")
 operator fun <Ch> SkipParser<Ch, *>.times(next: CutParserT<Ch>) = Sequential<Ch, Nothing, Nullad<Nothing>>(listOf(this, next), ::Nullad)
 @JvmName("times_s_x")
 operator fun <Ch, Z> SkipParser<Ch, *>.times(next: MeaningfulParser<Ch, Z>) = Sequential<Ch, Z, Monad<Z>>(listOf(this, next), ::Monad)
 
 @JvmName("times_c_s")
 operator fun <Ch> CutParserT<Ch>.times(next: SkipParser<Ch, *>) = Sequential<Ch, Nothing, Nullad<Nothing>>(listOf(this, next), ::Nullad)
 @JvmName("times_c_c")
 operator fun <Ch> CutParserT<Ch>.times(next: CutParserT<Ch>) = Sequential<Ch, Nothing, Nullad<Nothing>>(listOf(this, next), ::Nullad)
 @JvmName("times_c_x")
 operator fun <Ch, Z> CutParserT<Ch>.times(next: MeaningfulParser<Ch, Z>) = Sequential<Ch, Z, Monad<Z>>(listOf(this, next), ::Monad)
 
 @JvmName("times_0_s")
 operator fun <Ch, A> Sequential<Ch, A, Nullad<A>>.times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times_0_c")
 operator fun <Ch, A> Sequential<Ch, A, Nullad<A>>.times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times_0_x")
 operator fun <Ch, Z, A> Sequential<Ch, Z, Nullad<Z>>.times(next: MeaningfulParser<Ch, A>) = Sequential<Ch, A, Monad<A>>(parsers + next, ::Monad)
 
 @JvmName("times_1_s")
 operator fun <Ch, A> Sequential<Ch, A, Monad<A>>.times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times_1_c")
 operator fun <Ch, A> Sequential<Ch, A, Monad<A>>.times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times_1_x")
 operator fun <Ch, Z, A: Z, B: Z> Sequential<Ch, A, Monad<A>>.times(next: MeaningfulParser<Ch, B>) = Sequential<Ch, Z, Dyad<Z, A, B>>(parsers + next, ::Dyad)

 @JvmName("times2s")
 operator fun <Ch, Z, A : Z, B : Z> Sequential<Ch, Z, Dyad<Z, A, B>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times2c")
 operator fun <Ch, Z, A : Z, B : Z> Sequential<Ch, Z, Dyad<Z, A, B>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times2x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z> Sequential<Ch, Z, Dyad<Z, A, B>> .times(next: MeaningfulParser<Ch, C>) =  Sequential<Ch, Z, Triad<Z, A, B, C>>(parsers + next, ::Triad)

   @JvmName("times3s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z> Sequential<Ch, Z, Triad<Z, A, B, C>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times3c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z> Sequential<Ch, Z, Triad<Z, A, B, C>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times3x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z> Sequential<Ch, Z, Triad<Z, A, B, C>> .times(next: MeaningfulParser<Ch, D>) =  Sequential<Ch, Z, Tetrad<Z, A, B, C, D>>(parsers + next, ::Tetrad)

   @JvmName("times4s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z> Sequential<Ch, Z, Tetrad<Z, A, B, C, D>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times4c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z> Sequential<Ch, Z, Tetrad<Z, A, B, C, D>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times4x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z> Sequential<Ch, Z, Tetrad<Z, A, B, C, D>> .times(next: MeaningfulParser<Ch, E>) =  Sequential<Ch, Z, Pentad<Z, A, B, C, D, E>>(parsers + next, ::Pentad)

   @JvmName("times5s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z> Sequential<Ch, Z, Pentad<Z, A, B, C, D, E>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times5c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z> Sequential<Ch, Z, Pentad<Z, A, B, C, D, E>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times5x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z> Sequential<Ch, Z, Pentad<Z, A, B, C, D, E>> .times(next: MeaningfulParser<Ch, F>) =  Sequential<Ch, Z, Hexad<Z, A, B, C, D, E, F>>(parsers + next, ::Hexad)

   @JvmName("times6s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z> Sequential<Ch, Z, Hexad<Z, A, B, C, D, E, F>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times6c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z> Sequential<Ch, Z, Hexad<Z, A, B, C, D, E, F>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times6x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z> Sequential<Ch, Z, Hexad<Z, A, B, C, D, E, F>> .times(next: MeaningfulParser<Ch, G>) =  Sequential<Ch, Z, Heptad<Z, A, B, C, D, E, F, G>>(parsers + next, ::Heptad)

   @JvmName("times7s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z> Sequential<Ch, Z, Heptad<Z, A, B, C, D, E, F, G>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times7c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z> Sequential<Ch, Z, Heptad<Z, A, B, C, D, E, F, G>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times7x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z> Sequential<Ch, Z, Heptad<Z, A, B, C, D, E, F, G>> .times(next: MeaningfulParser<Ch, H>) =  Sequential<Ch, Z, Octad<Z, A, B, C, D, E, F, G, H>>(parsers + next, ::Octad)

   @JvmName("times8s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z> Sequential<Ch, Z, Octad<Z, A, B, C, D, E, F, G, H>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times8c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z> Sequential<Ch, Z, Octad<Z, A, B, C, D, E, F, G, H>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times8x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z> Sequential<Ch, Z, Octad<Z, A, B, C, D, E, F, G, H>> .times(next: MeaningfulParser<Ch, I>) =  Sequential<Ch, Z, Ennead<Z, A, B, C, D, E, F, G, H, I>>(parsers + next, ::Ennead)

   @JvmName("times9s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z> Sequential<Ch, Z, Ennead<Z, A, B, C, D, E, F, G, H, I>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times9c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z> Sequential<Ch, Z, Ennead<Z, A, B, C, D, E, F, G, H, I>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times9x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z> Sequential<Ch, Z, Ennead<Z, A, B, C, D, E, F, G, H, I>> .times(next: MeaningfulParser<Ch, J>) =  Sequential<Ch, Z, Decad<Z, A, B, C, D, E, F, G, H, I, J>>(parsers + next, ::Decad)

   @JvmName("times10s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z> Sequential<Ch, Z, Decad<Z, A, B, C, D, E, F, G, H, I, J>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times10c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z> Sequential<Ch, Z, Decad<Z, A, B, C, D, E, F, G, H, I, J>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times10x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z> Sequential<Ch, Z, Decad<Z, A, B, C, D, E, F, G, H, I, J>> .times(next: MeaningfulParser<Ch, K>) =  Sequential<Ch, Z, Undecad<Z, A, B, C, D, E, F, G, H, I, J, K>>(parsers + next, ::Undecad)

   @JvmName("times11s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z> Sequential<Ch, Z, Undecad<Z, A, B, C, D, E, F, G, H, I, J, K>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times11c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z> Sequential<Ch, Z, Undecad<Z, A, B, C, D, E, F, G, H, I, J, K>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times11x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z> Sequential<Ch, Z, Undecad<Z, A, B, C, D, E, F, G, H, I, J, K>> .times(next: MeaningfulParser<Ch, L>) =  Sequential<Ch, Z, Dodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L>>(parsers + next, ::Dodecad)

   @JvmName("times12s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z> Sequential<Ch, Z, Dodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times12c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z> Sequential<Ch, Z, Dodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times12x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z> Sequential<Ch, Z, Dodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L>> .times(next: MeaningfulParser<Ch, M>) =  Sequential<Ch, Z, Tridecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M>>(parsers + next, ::Tridecad)

   @JvmName("times13s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z> Sequential<Ch, Z, Tridecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times13c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z> Sequential<Ch, Z, Tridecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times13x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z> Sequential<Ch, Z, Tridecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M>> .times(next: MeaningfulParser<Ch, N>) =  Sequential<Ch, Z, Quattuordecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N>>(parsers + next, ::Quattuordecad)

   @JvmName("times14s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z> Sequential<Ch, Z, Quattuordecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times14c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z> Sequential<Ch, Z, Quattuordecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times14x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z> Sequential<Ch, Z, Quattuordecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N>> .times(next: MeaningfulParser<Ch, O>) =  Sequential<Ch, Z, Quindecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>>(parsers + next, ::Quindecad)

   @JvmName("times15s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z> Sequential<Ch, Z, Quindecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times15c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z> Sequential<Ch, Z, Quindecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times15x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z> Sequential<Ch, Z, Quindecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>> .times(next: MeaningfulParser<Ch, P>) =  Sequential<Ch, Z, Hexdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>>(parsers + next, ::Hexdecad)

   @JvmName("times16s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z> Sequential<Ch, Z, Hexdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times16c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z> Sequential<Ch, Z, Hexdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times16x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z> Sequential<Ch, Z, Hexdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>> .times(next: MeaningfulParser<Ch, Q>) =  Sequential<Ch, Z, Heptadecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>>(parsers + next, ::Heptadecad)

   @JvmName("times17s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z> Sequential<Ch, Z, Heptadecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times17c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z> Sequential<Ch, Z, Heptadecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times17x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z> Sequential<Ch, Z, Heptadecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>> .times(next: MeaningfulParser<Ch, R>) =  Sequential<Ch, Z, Octodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>>(parsers + next, ::Octodecad)

   @JvmName("times18s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z> Sequential<Ch, Z, Octodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times18c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z> Sequential<Ch, Z, Octodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times18x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z, S : Z> Sequential<Ch, Z, Octodecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>> .times(next: MeaningfulParser<Ch, S>) =  Sequential<Ch, Z, Novemdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>>(parsers + next, ::Novemdecad)

   @JvmName("times19s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z, S : Z> Sequential<Ch, Z, Novemdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times19c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z, S : Z> Sequential<Ch, Z, Novemdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times19x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z, S : Z, T : Z> Sequential<Ch, Z, Novemdecad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>> .times(next: MeaningfulParser<Ch, T>) =  Sequential<Ch, Z, Icosad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>>(parsers + next, ::Icosad)

   @JvmName("times20s")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z, S : Z, T : Z> Sequential<Ch, Z, Icosad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>> .times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times20c")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z, S : Z, T : Z> Sequential<Ch, Z, Icosad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>> .times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times20x")
 operator fun <Ch, Z, A : Z, B : Z, C : Z, D : Z, E : Z, F : Z, G : Z, H : Z, I : Z, J : Z, K : Z, L : Z, M : Z, N : Z, O : Z, P : Z, Q : Z, R : Z, S : Z, T : Z, U : Z> Sequential<Ch, Z, Icosad<Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>> .times(next: MeaningfulParser<Ch, U>) =  Sequential<Ch, Z, Myriad<Z>>(parsers + next, ::Myriad)

   

@JvmName("times_m_s")
 operator fun <Ch, Z> Sequential<Ch, Z, Myriad<Z>>.times(next: SkipParser<Ch, *>) = Sequential(parsers + next, composer)
 @JvmName("times_m_c")
 operator fun <Ch, Z> Sequential<Ch, Z, Myriad<Z>>.times(next: CutParserT<Ch>) = Sequential(parsers + next, composer)
 @JvmName("times_m_x")
 operator fun <Ch, Z> Sequential<Ch, Z, Myriad<Z>>.times(next: MeaningfulParser<Ch, Z>) = Sequential<Ch, Z, Myriad<Z>>(parsers + next, ::Myriad)

  
