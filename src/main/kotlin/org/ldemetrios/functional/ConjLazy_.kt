  @file:Suppress("PackageDirectoryMismatch", "unused", "NAME_SHADOWING", "KotlinRedundantDiagnosticSuppress", "UNUSED_PARAMETER", "UNUSED_PARAMETER", "ObjectPropertyName", "NonAsciiCharacters", "RedundantLambdaArrow", "TrailingComma")  

 package org.ldemetrios.functional

fun <T> conjLazy(list: Sequence<T>): Sequence<T> = list
 fun <T> conjLazy(list: Sequence<T>, a : T) : Sequence<T> = listOf(list, listOf(a).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T) : Sequence<T> = listOf(list, listOf(a, b).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T) : Sequence<T> = listOf(list, listOf(a, b, c).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T) : Sequence<T> = listOf(list, listOf(a, b, c, d).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T, s : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T, s : T, t : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T, s : T, t : T, u : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T, s : T, t : T, u : T, v : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T, s : T, t : T, u : T, v : T, w : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T, s : T, t : T, u : T, v : T, w : T, x : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x).asSequence()).asSequence().flatMap { it } 
  fun <T> conjLazy(list: Sequence<T>, a : T, b : T, c : T, d : T, e : T, f : T, g : T, h : T, i : T, j : T, k : T, l : T, m : T, n : T, o : T, p : T, q : T, r : T, s : T, t : T, u : T, v : T, w : T, x : T, y : T) : Sequence<T> = listOf(list, listOf(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y).asSequence()).asSequence().flatMap { it }   
